/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type { StandardError, Starsystem, StarsystemsParams } from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Starsystems list
 */
export const starsystems = (
  params?: MaybeRef<StarsystemsParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Starsystem[]>({
    url: `/starsystems`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getStarsystemsQueryKey = (
  params?: MaybeRef<StarsystemsParams>,
) => {
  return ["starsystems", ...(params ? [params] : [])] as const;
};

export const getStarsystemsQueryOptions = <
  TData = Awaited<ReturnType<typeof starsystems>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<StarsystemsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof starsystems>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStarsystemsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof starsystems>>> = ({
    signal,
  }) => starsystems(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof starsystems>>,
    TError,
    TData
  >;
};

export type StarsystemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof starsystems>>
>;
export type StarsystemsQueryError = ErrorType<unknown>;

/**
 * @summary Starsystems list
 */

export function useStarsystems<
  TData = Awaited<ReturnType<typeof starsystems>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<StarsystemsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof starsystems>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStarsystemsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Starsystem Detail
 */
export const starsystem = (slug: MaybeRef<string>, signal?: AbortSignal) => {
  slug = unref(slug);

  return axiosClient<Starsystem>({
    url: `/starsystems/${slug}`,
    method: "GET",
    signal,
  });
};

export const getStarsystemQueryKey = (slug: MaybeRef<string>) => {
  return ["starsystems", slug] as const;
};

export const getStarsystemQueryOptions = <
  TData = Awaited<ReturnType<typeof starsystem>>,
  TError = ErrorType<StandardError>,
>(
  slug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof starsystem>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStarsystemQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof starsystem>>> = ({
    signal,
  }) => starsystem(slug, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(slug)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof starsystem>>, TError, TData>;
};

export type StarsystemQueryResult = NonNullable<
  Awaited<ReturnType<typeof starsystem>>
>;
export type StarsystemQueryError = ErrorType<StandardError>;

/**
 * @summary Starsystem Detail
 */

export function useStarsystem<
  TData = Awaited<ReturnType<typeof starsystem>>,
  TError = ErrorType<StandardError>,
>(
  slug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof starsystem>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStarsystemQueryOptions(slug, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
