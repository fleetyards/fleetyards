/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  ImagesParams,
  ImagesRandomParams
} from '../models';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Image,
  Images
} from '../models';

import { axiosClient } from '../../axiosClient';
import type { ErrorType } from '../../axiosClient';
import { customQueryOptions } from '../../customQueryOptions';





/**
 * @summary Images list
 */
export const images = (
    params?: MaybeRef<ImagesParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return axiosClient<Images>(
      {url: `/images`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getImagesQueryKey = (params?: MaybeRef<ImagesParams>,) => {
    return ['images', ...(params ? [params]: [])] as const;
    }

    
export const useImagesQueryOptions = <TData = Awaited<ReturnType<typeof images>>, TError = ErrorType<unknown>>(params?: MaybeRef<ImagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof images>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getImagesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof images>>> = ({ signal }) => images(params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof images>>, TError, TData> 
}

export type ImagesQueryResult = NonNullable<Awaited<ReturnType<typeof images>>>
export type ImagesQueryError = ErrorType<unknown>


/**
 * @summary Images list
 */

export function useImages<TData = Awaited<ReturnType<typeof images>>, TError = ErrorType<unknown>>(
 params?: MaybeRef<ImagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof images>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useImagesQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * Get a randomized List of 14 Images
 * @summary Images random list
 */
export const imagesRandom = (
    params?: MaybeRef<ImagesRandomParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return axiosClient<Image[]>(
      {url: `/images/random`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getImagesRandomQueryKey = (params?: MaybeRef<ImagesRandomParams>,) => {
    return ['images','random', ...(params ? [params]: [])] as const;
    }

    
export const useImagesRandomQueryOptions = <TData = Awaited<ReturnType<typeof imagesRandom>>, TError = ErrorType<unknown>>(params?: MaybeRef<ImagesRandomParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof imagesRandom>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getImagesRandomQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof imagesRandom>>> = ({ signal }) => imagesRandom(params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof imagesRandom>>, TError, TData> 
}

export type ImagesRandomQueryResult = NonNullable<Awaited<ReturnType<typeof imagesRandom>>>
export type ImagesRandomQueryError = ErrorType<unknown>


/**
 * @summary Images random list
 */

export function useImagesRandom<TData = Awaited<ReturnType<typeof imagesRandom>>, TError = ErrorType<unknown>>(
 params?: MaybeRef<ImagesRandomParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof imagesRandom>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useImagesRandomQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}





export const getImagesResponseMock = (overrideResponse: Partial< Images > = {}): Images => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), background: faker.datatype.boolean(), bigUrl: faker.internet.url(), caption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), smallUrl: faker.internet.url(), type: faker.string.alpha(20), url: faker.internet.url(), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gallery: faker.helpers.arrayElement([{id: faker.string.uuid(), type: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20)}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getImagesRandomResponseMock = (): Image[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), background: faker.datatype.boolean(), bigUrl: faker.internet.url(), caption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), smallUrl: faker.internet.url(), type: faker.string.alpha(20), url: faker.internet.url(), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gallery: faker.helpers.arrayElement([{id: faker.string.uuid(), type: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20)}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))


export const getImagesMockHandler = (overrideResponse?: Images | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Images> | Images)) => {
  return http.get('*/images', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getImagesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getImagesRandomMockHandler = (overrideResponse?: Image[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Image[]> | Image[])) => {
  return http.get('*/images/random', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getImagesRandomResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getImagesMock = () => [
  getImagesMockHandler(),
  getImagesRandomMockHandler()
]
