/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type { Manufacturers, ManufacturersParams } from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary Manufacturers list
 */
export const manufacturers = (
  params?: MaybeRef<ManufacturersParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Manufacturers>({
    url: `/manufacturers`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getManufacturersQueryKey = (
  params?: MaybeRef<ManufacturersParams>,
) => {
  return ["manufacturers", ...(params ? [params] : [])] as const;
};

export const useManufacturersQueryOptions = <
  TData = Awaited<ReturnType<typeof manufacturers>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<ManufacturersParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof manufacturers>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getManufacturersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof manufacturers>>> = ({
    signal,
  }) => manufacturers(params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof manufacturers>>,
    TError,
    TData
  >;
};

export type ManufacturersQueryResult = NonNullable<
  Awaited<ReturnType<typeof manufacturers>>
>;
export type ManufacturersQueryError = ErrorType<unknown>;

/**
 * @summary Manufacturers list
 */

export function useManufacturers<
  TData = Awaited<ReturnType<typeof manufacturers>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<ManufacturersParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof manufacturers>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useManufacturersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary with_models manufacturer
 */
export const getManufacturersWithModels = (signal?: AbortSignal) => {
  return axiosClient<Manufacturers>({
    url: `/manufacturers/with-models`,
    method: "GET",
    signal,
  });
};

export const getGetManufacturersWithModelsQueryKey = () => {
  return ["manufacturers", "with-models"] as const;
};

export const useGetManufacturersWithModelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getManufacturersWithModels>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getManufacturersWithModels>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetManufacturersWithModelsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getManufacturersWithModels>>
  > = ({ signal }) => getManufacturersWithModels(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getManufacturersWithModels>>,
    TError,
    TData
  >;
};

export type GetManufacturersWithModelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getManufacturersWithModels>>
>;
export type GetManufacturersWithModelsQueryError = ErrorType<unknown>;

/**
 * @summary with_models manufacturer
 */

export function useGetManufacturersWithModels<
  TData = Awaited<ReturnType<typeof getManufacturersWithModels>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getManufacturersWithModels>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useGetManufacturersWithModelsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
