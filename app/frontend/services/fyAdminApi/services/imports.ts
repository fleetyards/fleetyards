/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net Command API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type { Import, Imports, ImportsParams, StandardError } from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * Get a List of Imports
 * @summary Imports list
 */
export const imports = (
  params?: MaybeRef<ImportsParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Imports>({
    url: `/imports`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

const getImportsQueryKey = (params?: MaybeRef<ImportsParams>) => {
  return ["imports", ...(params ? [params] : [])] as const;
};

export const useImportsQueryOptions = <
  TData = Awaited<ReturnType<typeof imports>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<ImportsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof imports>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getImportsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof imports>>> = ({
    signal,
  }) => imports(params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof imports>>,
    TError,
    TData
  >;
};

export type ImportsQueryResult = NonNullable<
  Awaited<ReturnType<typeof imports>>
>;
export type ImportsQueryError = ErrorType<StandardError>;

/**
 * @summary Imports list
 */

export function useImports<
  TData = Awaited<ReturnType<typeof imports>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<ImportsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof imports>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useImportsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Import Detail
 */
export const _import = (id: MaybeRef<string>, signal?: AbortSignal) => {
  id = unref(id);

  return axiosClient<Import>({ url: `/imports/${id}`, method: "GET", signal });
};

const getImportQueryKey = (id: MaybeRef<string>) => {
  return ["imports", id] as const;
};

export const useImportQueryOptions = <
  TData = Awaited<ReturnType<typeof _import>>,
  TError = ErrorType<StandardError>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof _import>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getImportQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof _import>>> = ({
    signal,
  }) => _import(id, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof _import>>,
    TError,
    TData
  >;
};

export type _ImportQueryResult = NonNullable<
  Awaited<ReturnType<typeof _import>>
>;
export type _ImportQueryError = ErrorType<StandardError>;

/**
 * @summary Import Detail
 */

export function useImport<
  TData = Awaited<ReturnType<typeof _import>>,
  TError = ErrorType<StandardError>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof _import>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useImportQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
