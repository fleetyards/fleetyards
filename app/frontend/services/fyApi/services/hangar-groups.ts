/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  HangarGroup,
  HangarGroupCreateInput,
  HangarGroupSort200,
  HangarGroupUpdateInput,
  StandardError,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary HangarGroup create
 */
export const create = (
  hangarGroupCreateInput: MaybeRef<HangarGroupCreateInput>,
  signal?: AbortSignal,
) => {
  hangarGroupCreateInput = unref(hangarGroupCreateInput);

  return axiosClient<HangarGroup>({
    url: `/hangar/groups`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: hangarGroupCreateInput,
    signal,
  });
};

export const getCreateMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: HangarGroupCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: HangarGroupCreateInput },
  TContext
> => {
  const mutationKey = ["create"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof create>>,
    { data: HangarGroupCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return create(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody = HangarGroupCreateInput;
export type CreateMutationError = ErrorType<StandardError>;

/**
 * @summary HangarGroup create
 */
export const useCreate = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: HangarGroupCreateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: HangarGroupCreateInput },
  TContext
> => {
  const mutationOptions = getCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary HangarGroup list
 */
export const hangarGroups = (signal?: AbortSignal) => {
  return axiosClient<HangarGroup[]>({
    url: `/hangar/groups`,
    method: "GET",
    signal,
  });
};

export const getHangarGroupsQueryKey = () => {
  return ["hangar", "groups"] as const;
};

export const getHangarGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof hangarGroups>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof hangarGroups>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarGroupsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof hangarGroups>>> = ({
    signal,
  }) => hangarGroups(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangarGroups>>,
    TError,
    TData
  >;
};

export type HangarGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof hangarGroups>>
>;
export type HangarGroupsQueryError = ErrorType<StandardError>;

/**
 * @summary HangarGroup list
 */

export function useHangarGroups<
  TData = Awaited<ReturnType<typeof hangarGroups>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof hangarGroups>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarGroupsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary HangarGroup Destroy
 */
export const destroy = (id: MaybeRef<string>) => {
  id = unref(id);

  return axiosClient<HangarGroup>({
    url: `/hangar/groups/${id}`,
    method: "DELETE",
  });
};

export const getDestroyMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroy>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroy>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["destroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroy>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return destroy(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroy>>
>;

export type DestroyMutationError = ErrorType<StandardError>;

/**
 * @summary HangarGroup Destroy
 */
export const useDestroy = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroy>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroy>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary HangarGroup Update
 */
export const hangarGroupUpdate = (
  id: MaybeRef<string>,
  hangarGroupUpdateInput: MaybeRef<HangarGroupUpdateInput>,
) => {
  id = unref(id);
  hangarGroupUpdateInput = unref(hangarGroupUpdateInput);

  return axiosClient<HangarGroup>({
    url: `/hangar/groups/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: hangarGroupUpdateInput,
  });
};

export const getHangarGroupUpdateMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof hangarGroupUpdate>>,
    TError,
    { id: string; data: HangarGroupUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof hangarGroupUpdate>>,
  TError,
  { id: string; data: HangarGroupUpdateInput },
  TContext
> => {
  const mutationKey = ["hangarGroupUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof hangarGroupUpdate>>,
    { id: string; data: HangarGroupUpdateInput }
  > = (props) => {
    const { id, data } = props ?? {};

    return hangarGroupUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type HangarGroupUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof hangarGroupUpdate>>
>;
export type HangarGroupUpdateMutationBody = HangarGroupUpdateInput;
export type HangarGroupUpdateMutationError = ErrorType<StandardError>;

/**
 * @summary HangarGroup Update
 */
export const useHangarGroupUpdate = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof hangarGroupUpdate>>,
    TError,
    { id: string; data: HangarGroupUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof hangarGroupUpdate>>,
  TError,
  { id: string; data: HangarGroupUpdateInput },
  TContext
> => {
  const mutationOptions = getHangarGroupUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary HangarGroup sort
 */
export const hangarGroupSort = () => {
  return axiosClient<HangarGroupSort200>({
    url: `/hangar/groups/sort`,
    method: "PUT",
  });
};

export const getHangarGroupSortMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof hangarGroupSort>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof hangarGroupSort>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["hangarGroupSort"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof hangarGroupSort>>,
    void
  > = () => {
    return hangarGroupSort();
  };

  return { mutationFn, ...mutationOptions };
};

export type HangarGroupSortMutationResult = NonNullable<
  Awaited<ReturnType<typeof hangarGroupSort>>
>;

export type HangarGroupSortMutationError = ErrorType<StandardError>;

/**
 * @summary HangarGroup sort
 */
export const useHangarGroupSort = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof hangarGroupSort>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof hangarGroupSort>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getHangarGroupSortMutationOptions(options);

  return useMutation(mutationOptions);
};
