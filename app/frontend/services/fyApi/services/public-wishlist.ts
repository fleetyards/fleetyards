/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type { GetParams, HangarPublic, StandardError } from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Your Wishlist
 */
export const get = (
  username: MaybeRef<string>,
  params?: MaybeRef<GetParams>,
  signal?: AbortSignal,
) => {
  username = unref(username);
  params = unref(params);

  return axiosClient<HangarPublic>({
    url: `/public/wishlists/${username}`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getGetQueryKey = (
  username: MaybeRef<string>,
  params?: MaybeRef<GetParams>,
) => {
  return [
    "public",
    "wishlists",
    username,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetQueryOptions = <
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<StandardError>,
>(
  username: MaybeRef<string>,
  params?: MaybeRef<GetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetQueryKey(username, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({
    signal,
  }) => get(username, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(username)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>;
};

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = ErrorType<StandardError>;

/**
 * @summary Your Wishlist
 */

export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<StandardError>,
>(
  username: MaybeRef<string>,
  params?: MaybeRef<GetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetQueryOptions(username, params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
