/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  FilterOption,
  Image,
  StandardError,
  Station,
  StationImagesParams,
  StationsParams,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Station types
 */
export const stationsTypes = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/stations/station-types`,
    method: "GET",
    signal,
  });
};

export const getStationsTypesQueryKey = () => {
  return ["stations", "station-types"] as const;
};

export const getStationsTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof stationsTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof stationsTypes>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStationsTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof stationsTypes>>> = ({
    signal,
  }) => stationsTypes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof stationsTypes>>,
    TError,
    TData
  >;
};

export type StationsTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof stationsTypes>>
>;
export type StationsTypesQueryError = ErrorType<unknown>;

/**
 * @summary Station types
 */

export function useStationsTypes<
  TData = Awaited<ReturnType<typeof stationsTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof stationsTypes>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStationsTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Station Ship sizes
 */
export const stationsShipSizes = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/stations/ship-sizes`,
    method: "GET",
    signal,
  });
};

export const getStationsShipSizesQueryKey = () => {
  return ["stations", "ship-sizes"] as const;
};

export const getStationsShipSizesQueryOptions = <
  TData = Awaited<ReturnType<typeof stationsShipSizes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof stationsShipSizes>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStationsShipSizesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof stationsShipSizes>>
  > = ({ signal }) => stationsShipSizes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof stationsShipSizes>>,
    TError,
    TData
  >;
};

export type StationsShipSizesQueryResult = NonNullable<
  Awaited<ReturnType<typeof stationsShipSizes>>
>;
export type StationsShipSizesQueryError = ErrorType<unknown>;

/**
 * @summary Station Ship sizes
 */

export function useStationsShipSizes<
  TData = Awaited<ReturnType<typeof stationsShipSizes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof stationsShipSizes>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStationsShipSizesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Station classifications
 */
export const stationsClassifications = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/stations/classifications`,
    method: "GET",
    signal,
  });
};

export const getStationsClassificationsQueryKey = () => {
  return ["stations", "classifications"] as const;
};

export const getStationsClassificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof stationsClassifications>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof stationsClassifications>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStationsClassificationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof stationsClassifications>>
  > = ({ signal }) => stationsClassifications(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof stationsClassifications>>,
    TError,
    TData
  >;
};

export type StationsClassificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof stationsClassifications>>
>;
export type StationsClassificationsQueryError = ErrorType<unknown>;

/**
 * @summary Station classifications
 */

export function useStationsClassifications<
  TData = Awaited<ReturnType<typeof stationsClassifications>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof stationsClassifications>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStationsClassificationsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stations list
 */
export const stations = (
  params?: MaybeRef<StationsParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Station[]>({
    url: `/stations`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getStationsQueryKey = (params?: MaybeRef<StationsParams>) => {
  return ["stations", ...(params ? [params] : [])] as const;
};

export const getStationsQueryOptions = <
  TData = Awaited<ReturnType<typeof stations>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<StationsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof stations>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof stations>>> = ({
    signal,
  }) => stations(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof stations>>,
    TError,
    TData
  >;
};

export type StationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof stations>>
>;
export type StationsQueryError = ErrorType<unknown>;

/**
 * @summary Stations list
 */

export function useStations<
  TData = Awaited<ReturnType<typeof stations>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<StationsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof stations>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStationsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Station Detail
 */
export const station = (slug: MaybeRef<string>, signal?: AbortSignal) => {
  slug = unref(slug);

  return axiosClient<Station>({
    url: `/stations/${slug}`,
    method: "GET",
    signal,
  });
};

export const getStationQueryKey = (slug: MaybeRef<string>) => {
  return ["stations", slug] as const;
};

export const getStationQueryOptions = <
  TData = Awaited<ReturnType<typeof station>>,
  TError = ErrorType<StandardError>,
>(
  slug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof station>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStationQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof station>>> = ({
    signal,
  }) => station(slug, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(slug)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof station>>, TError, TData>;
};

export type StationQueryResult = NonNullable<
  Awaited<ReturnType<typeof station>>
>;
export type StationQueryError = ErrorType<StandardError>;

/**
 * @summary Station Detail
 */

export function useStation<
  TData = Awaited<ReturnType<typeof station>>,
  TError = ErrorType<StandardError>,
>(
  slug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof station>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStationQueryOptions(slug, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Station Images
 */
export const stationImages = (
  slug: MaybeRef<string>,
  params?: MaybeRef<StationImagesParams>,
  signal?: AbortSignal,
) => {
  slug = unref(slug);
  params = unref(params);

  return axiosClient<Image[]>({
    url: `/stations/${slug}/images`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getStationImagesQueryKey = (
  slug: MaybeRef<string>,
  params?: MaybeRef<StationImagesParams>,
) => {
  return ["stations", slug, "images", ...(params ? [params] : [])] as const;
};

export const getStationImagesQueryOptions = <
  TData = Awaited<ReturnType<typeof stationImages>>,
  TError = ErrorType<StandardError>,
>(
  slug: MaybeRef<string>,
  params?: MaybeRef<StationImagesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof stationImages>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStationImagesQueryKey(slug, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof stationImages>>> = ({
    signal,
  }) => stationImages(slug, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(slug)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof stationImages>>,
    TError,
    TData
  >;
};

export type StationImagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof stationImages>>
>;
export type StationImagesQueryError = ErrorType<StandardError>;

/**
 * @summary Station Images
 */

export function useStationImages<
  TData = Awaited<ReturnType<typeof stationImages>>,
  TError = ErrorType<StandardError>,
>(
  slug: MaybeRef<string>,
  params?: MaybeRef<StationImagesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof stationImages>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStationImagesQueryOptions(slug, params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
