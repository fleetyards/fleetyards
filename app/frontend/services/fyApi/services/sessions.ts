/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation } from "@tanstack/vue-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  ConfirmAccessInput,
  SessionInput,
  StandardError,
  StandardMessage,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary confirm_access session
 */
export const confirmAccess = (
  confirmAccessInput: MaybeRef<ConfirmAccessInput>,
  signal?: AbortSignal,
) => {
  confirmAccessInput = unref(confirmAccessInput);

  return axiosClient<StandardMessage>({
    url: `/sessions/confirm-access`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: confirmAccessInput,
    signal,
  });
};

export const getConfirmAccessMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof confirmAccess>>,
    TError,
    { data: ConfirmAccessInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof confirmAccess>>,
  TError,
  { data: ConfirmAccessInput },
  TContext
> => {
  const mutationKey = ["confirmAccess"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof confirmAccess>>,
    { data: ConfirmAccessInput }
  > = (props) => {
    const { data } = props ?? {};

    return confirmAccess(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConfirmAccessMutationResult = NonNullable<
  Awaited<ReturnType<typeof confirmAccess>>
>;
export type ConfirmAccessMutationBody = ConfirmAccessInput;
export type ConfirmAccessMutationError = ErrorType<StandardError>;

/**
 * @summary confirm_access session
 */
export const useConfirmAccess = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof confirmAccess>>,
    TError,
    { data: ConfirmAccessInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof confirmAccess>>,
  TError,
  { data: ConfirmAccessInput },
  TContext
> => {
  const mutationOptions = getConfirmAccessMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary create session
 */
export const createSession = (
  sessionInput: MaybeRef<SessionInput>,
  signal?: AbortSignal,
) => {
  sessionInput = unref(sessionInput);

  return axiosClient<StandardMessage>({
    url: `/sessions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: sessionInput,
    signal,
  });
};

export const getCreateSessionMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSession>>,
    TError,
    { data: SessionInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSession>>,
  TError,
  { data: SessionInput },
  TContext
> => {
  const mutationKey = ["createSession"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSession>>,
    { data: SessionInput }
  > = (props) => {
    const { data } = props ?? {};

    return createSession(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSession>>
>;
export type CreateSessionMutationBody = SessionInput;
export type CreateSessionMutationError = ErrorType<StandardError>;

/**
 * @summary create session
 */
export const useCreateSession = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSession>>,
    TError,
    { data: SessionInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createSession>>,
  TError,
  { data: SessionInput },
  TContext
> => {
  const mutationOptions = getCreateSessionMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Destroy Session
 */
export const destroySession = () => {
  return axiosClient<void>({ url: `/sessions`, method: "DELETE" });
};

export const getDestroySessionMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroySession>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroySession>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["destroySession"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroySession>>,
    void
  > = () => {
    return destroySession();
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroySessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroySession>>
>;

export type DestroySessionMutationError = ErrorType<StandardError>;

/**
 * @summary Destroy Session
 */
export const useDestroySession = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroySession>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroySession>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDestroySessionMutationOptions(options);

  return useMutation(mutationOptions);
};
