---
openapi: 3.0.1
info:
  title: FleetYards.net Command API
  version: v1
servers:
- url: http://admin.fleetyards.test/api/v1
  description: Production Server
- url: https://admin.fleetyards.dev/api/v1
  description: Staging Server
- url: https://admin.fleetyards.test/api/v1
  description: Dev Server
paths:
  "/images":
    get:
      summary: list images
      description: Get a List of Images
      tags:
      - Images
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Image"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StandardError"
    post:
      summary: create image
      description: Create a new Image
      tags:
      - Images
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Image"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StandardError"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                "$ref": "#/components/schemas/ImageInputCreate"
  "/images/{id}":
    parameters:
    - name: id
      in: path
      format: uuid
      description: id
      required: true
      schema:
        type: string
    patch:
      summary: update image
      tags:
      - Images
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Image"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StandardError"
        '404':
          description: not_found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StandardError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                "$ref": "#/components/schemas/ImageInput"
    put:
      summary: update image
      tags:
      - Images
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Image"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StandardError"
        '404':
          description: not_found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StandardError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                "$ref": "#/components/schemas/ImageInput"
    delete:
      summary: delete image
      tags:
      - Images
      responses:
        '200':
          description: successful
        '401':
          description: unauthorized
        '404':
          description: not_found
components:
  schemas:
    GalleryTypeEnum:
      type: string
      enum:
      - Model
      - Station
      - Album
      title: GalleryTypeEnum
    Gallery:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
      required:
      - id
      - name
      - slug
      title: Gallery
    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        caption:
          type: string
          nullable: true
        size:
          type: number
        width:
          type: integer
          nullable: true
        height:
          type: integer
          nullable: true
        type:
          type: string
        enabled:
          type: boolean
        global:
          type: boolean
        background:
          type: boolean
        url:
          type: string
          format: uri
        smallUrl:
          type: string
          format: uri
        bigUrl:
          type: string
          format: uri
        gallery:
          "$ref": "#/components/schemas/Gallery"
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - id
      - name
      - createdAt
      - updatedAt
      title: Image
    ImageInput:
      type: object
      properties:
        caption:
          type: string
        enabled:
          type: boolean
        global:
          type: boolean
        background:
          type: boolean
        galleryId:
          type: string
          format: uuid
        galleryType:
          "$ref": "#/components/schemas/GalleryTypeEnum"
        file:
          type: string
      title: ImageInput
    ImageInputCreate:
      type: object
      properties:
        caption:
          type: string
        enabled:
          type: boolean
        global:
          type: boolean
        background:
          type: boolean
        galleryId:
          type: string
          format: uuid
        galleryType:
          "$ref": "#/components/schemas/GalleryTypeEnum"
        file:
          type: string
      title: ImageInputCreate
    StandardError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
      title: StandardError
    ValidationError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            "$ref": "#/components/schemas/FieldError"
      required:
      - code
      - message
      title: ValidationError
  parameters: {}
  securitySchemes: {}
  requestBodies: {}
  responses: {}
  headers: {}
  examples: {}
  links: {}
  callbacks: {}
