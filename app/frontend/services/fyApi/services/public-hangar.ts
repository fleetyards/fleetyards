/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  HangarPublic,
  PublicHangarEmbedParams,
  PublicHangarParams,
  StandardError,
  VehiclePublic,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Public Hangar embed
 */
export const publicHangarEmbed = (
  params: MaybeRef<PublicHangarEmbedParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<VehiclePublic[]>({
    url: `/public/hangars/embed`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getPublicHangarEmbedQueryKey = (
  params: MaybeRef<PublicHangarEmbedParams>,
) => {
  return ["public", "hangars", "embed", ...(params ? [params] : [])] as const;
};

export const getPublicHangarEmbedQueryOptions = <
  TData = Awaited<ReturnType<typeof publicHangarEmbed>>,
  TError = ErrorType<unknown>,
>(
  params: MaybeRef<PublicHangarEmbedParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicHangarEmbed>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getPublicHangarEmbedQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof publicHangarEmbed>>
  > = ({ signal }) => publicHangarEmbed(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof publicHangarEmbed>>,
    TError,
    TData
  >;
};

export type PublicHangarEmbedQueryResult = NonNullable<
  Awaited<ReturnType<typeof publicHangarEmbed>>
>;
export type PublicHangarEmbedQueryError = ErrorType<unknown>;

/**
 * @summary Public Hangar embed
 */

export function usePublicHangarEmbed<
  TData = Awaited<ReturnType<typeof publicHangarEmbed>>,
  TError = ErrorType<unknown>,
>(
  params: MaybeRef<PublicHangarEmbedParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicHangarEmbed>>,
        TError,
        TData
      >
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getPublicHangarEmbedQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Public Hangar
 */
export const publicHangar = (
  username: MaybeRef<string>,
  params?: MaybeRef<PublicHangarParams>,
  signal?: AbortSignal,
) => {
  username = unref(username);
  params = unref(params);

  return axiosClient<HangarPublic>({
    url: `/public/hangars/${username}`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getPublicHangarQueryKey = (
  username: MaybeRef<string>,
  params?: MaybeRef<PublicHangarParams>,
) => {
  return ["public", "hangars", username, ...(params ? [params] : [])] as const;
};

export const getPublicHangarQueryOptions = <
  TData = Awaited<ReturnType<typeof publicHangar>>,
  TError = ErrorType<StandardError>,
>(
  username: MaybeRef<string>,
  params?: MaybeRef<PublicHangarParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof publicHangar>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getPublicHangarQueryKey(username, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof publicHangar>>> = ({
    signal,
  }) => publicHangar(username, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(username)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof publicHangar>>, TError, TData>;
};

export type PublicHangarQueryResult = NonNullable<
  Awaited<ReturnType<typeof publicHangar>>
>;
export type PublicHangarQueryError = ErrorType<StandardError>;

/**
 * @summary Public Hangar
 */

export function usePublicHangar<
  TData = Awaited<ReturnType<typeof publicHangar>>,
  TError = ErrorType<StandardError>,
>(
  username: MaybeRef<string>,
  params?: MaybeRef<PublicHangarParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof publicHangar>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getPublicHangarQueryOptions(username, params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
