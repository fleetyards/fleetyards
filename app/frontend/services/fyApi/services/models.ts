/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  ModelHardpointsParams,
  ModelImagesParams,
  ModelLoanersParams,
  ModelModulePackagesParams,
  ModelModulesParams,
  ModelVariantsParams,
  ModelVideosParams,
  ModelsEmbedParams,
  ModelsParams,
  ModelsUpdatedParams,
  ModelsWithDocksParams,
  StandardError
} from '../models';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  ComponentItemClassEnum,
  HardpointCategoryEnum,
  HardpointGroupEnum,
  HardpointSourceEnum,
  ItemPriceItemTypeEnum,
  ItemPriceTimeRangeEnum,
  ItemPriceTypeEnum,
  ModelHardpointCategoryEnum,
  ModelHardpointGroupEnum,
  ModelHardpointSizeEnum,
  ModelHardpointSubCategoryEnum,
  ModelHardpointTypeEnum,
  ModelProductionStatusEnum,
  ThrusterClassEnum,
  VideoTypeEnum
} from '../models';
import type {
  Images,
  Model,
  ModelExtended,
  ModelHardpoints200Item,
  ModelModulePackages,
  ModelModules,
  ModelPaint,
  ModelUpgrade,
  Models,
  Videos
} from '../models';

import { axiosClient } from '../../axiosClient';
import type { ErrorType } from '../../axiosClient';
import { customQueryOptions } from '../../customQueryOptions';





/**
 * @deprecated
 * @summary Model Storeimage
 */
export const modelStoreImage = (
    slug: MaybeRef<string>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
      
      return axiosClient<unknown>(
      {url: `/models/${slug}/store-image`, method: 'GET', signal
    },
      );
    }
  

const getModelStoreImageQueryKey = (slug: MaybeRef<string>,) => {
    return ['models',slug,'store-image'] as const;
    }

    
export const useModelStoreImageQueryOptions = <TData = Awaited<ReturnType<typeof modelStoreImage>>, TError = ErrorType<void>>(slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelStoreImage>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelStoreImageQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelStoreImage>>> = ({ signal }) => modelStoreImage(slug, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelStoreImage>>, TError, TData> 
}

export type ModelStoreImageQueryResult = NonNullable<Awaited<ReturnType<typeof modelStoreImage>>>
export type ModelStoreImageQueryError = ErrorType<void>


/**
 * @deprecated
 * @summary Model Storeimage
 */

export function useModelStoreImage<TData = Awaited<ReturnType<typeof modelStoreImage>>, TError = ErrorType<void>>(
 slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelStoreImage>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelStoreImageQueryOptions(slug,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @deprecated
 * @summary Model Fleetchart Image
 */
export const modelFleetchartImage = (
    slug: MaybeRef<string>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
      
      return axiosClient<unknown>(
      {url: `/models/${slug}/fleetchart-image`, method: 'GET', signal
    },
      );
    }
  

const getModelFleetchartImageQueryKey = (slug: MaybeRef<string>,) => {
    return ['models',slug,'fleetchart-image'] as const;
    }

    
export const useModelFleetchartImageQueryOptions = <TData = Awaited<ReturnType<typeof modelFleetchartImage>>, TError = ErrorType<void | StandardError>>(slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelFleetchartImage>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelFleetchartImageQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelFleetchartImage>>> = ({ signal }) => modelFleetchartImage(slug, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelFleetchartImage>>, TError, TData> 
}

export type ModelFleetchartImageQueryResult = NonNullable<Awaited<ReturnType<typeof modelFleetchartImage>>>
export type ModelFleetchartImageQueryError = ErrorType<void | StandardError>


/**
 * @deprecated
 * @summary Model Fleetchart Image
 */

export function useModelFleetchartImage<TData = Awaited<ReturnType<typeof modelFleetchartImage>>, TError = ErrorType<void | StandardError>>(
 slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelFleetchartImage>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelFleetchartImageQueryOptions(slug,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Embed Models
 */
export const modelsEmbed = (
    params: MaybeRef<ModelsEmbedParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return axiosClient<Model[]>(
      {url: `/models/embed`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelsEmbedQueryKey = (params: MaybeRef<ModelsEmbedParams>,) => {
    return ['models','embed', ...(params ? [params]: [])] as const;
    }

    
export const useModelsEmbedQueryOptions = <TData = Awaited<ReturnType<typeof modelsEmbed>>, TError = ErrorType<unknown>>(params: MaybeRef<ModelsEmbedParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsEmbed>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelsEmbedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelsEmbed>>> = ({ signal }) => modelsEmbed(params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelsEmbed>>, TError, TData> 
}

export type ModelsEmbedQueryResult = NonNullable<Awaited<ReturnType<typeof modelsEmbed>>>
export type ModelsEmbedQueryError = ErrorType<unknown>


/**
 * @summary Embed Models
 */

export function useModelsEmbed<TData = Awaited<ReturnType<typeof modelsEmbed>>, TError = ErrorType<unknown>>(
 params: MaybeRef<ModelsEmbedParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsEmbed>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelsEmbedQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Hardpoints
 */
export const modelHardpoints = (
    slug: MaybeRef<string>,
    params?: MaybeRef<ModelHardpointsParams>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
params = unref(params);
      
      return axiosClient<ModelHardpoints200Item[]>(
      {url: `/models/${slug}/hardpoints`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelHardpointsQueryKey = (slug: MaybeRef<string>,
    params?: MaybeRef<ModelHardpointsParams>,) => {
    return ['models',slug,'hardpoints', ...(params ? [params]: [])] as const;
    }

    
export const useModelHardpointsQueryOptions = <TData = Awaited<ReturnType<typeof modelHardpoints>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>,
    params?: MaybeRef<ModelHardpointsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelHardpoints>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelHardpointsQueryKey(slug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelHardpoints>>> = ({ signal }) => modelHardpoints(slug,params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelHardpoints>>, TError, TData> 
}

export type ModelHardpointsQueryResult = NonNullable<Awaited<ReturnType<typeof modelHardpoints>>>
export type ModelHardpointsQueryError = ErrorType<StandardError>


/**
 * @summary Model Hardpoints
 */

export function useModelHardpoints<TData = Awaited<ReturnType<typeof modelHardpoints>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>,
    params?: MaybeRef<ModelHardpointsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelHardpoints>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelHardpointsQueryOptions(slug,params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Images
 */
export const modelImages = (
    slug: MaybeRef<string>,
    params?: MaybeRef<ModelImagesParams>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
params = unref(params);
      
      return axiosClient<Images>(
      {url: `/models/${slug}/images`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelImagesQueryKey = (slug: MaybeRef<string>,
    params?: MaybeRef<ModelImagesParams>,) => {
    return ['models',slug,'images', ...(params ? [params]: [])] as const;
    }

    
export const useModelImagesQueryOptions = <TData = Awaited<ReturnType<typeof modelImages>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>,
    params?: MaybeRef<ModelImagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelImages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelImagesQueryKey(slug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelImages>>> = ({ signal }) => modelImages(slug,params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelImages>>, TError, TData> 
}

export type ModelImagesQueryResult = NonNullable<Awaited<ReturnType<typeof modelImages>>>
export type ModelImagesQueryError = ErrorType<StandardError>


/**
 * @summary Model Images
 */

export function useModelImages<TData = Awaited<ReturnType<typeof modelImages>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>,
    params?: MaybeRef<ModelImagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelImages>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelImagesQueryOptions(slug,params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Models List
 */
export const models = (
    params?: MaybeRef<ModelsParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return axiosClient<Models>(
      {url: `/models`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelsQueryKey = (params?: MaybeRef<ModelsParams>,) => {
    return ['models', ...(params ? [params]: [])] as const;
    }

    
export const useModelsQueryOptions = <TData = Awaited<ReturnType<typeof models>>, TError = ErrorType<unknown>>(params?: MaybeRef<ModelsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof models>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof models>>> = ({ signal }) => models(params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof models>>, TError, TData> 
}

export type ModelsQueryResult = NonNullable<Awaited<ReturnType<typeof models>>>
export type ModelsQueryError = ErrorType<unknown>


/**
 * @summary Models List
 */

export function useModels<TData = Awaited<ReturnType<typeof models>>, TError = ErrorType<unknown>>(
 params?: MaybeRef<ModelsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof models>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelsQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Latest Models
 */
export const modelsLatest = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClient<Model[]>(
      {url: `/models/latest`, method: 'GET', signal
    },
      );
    }
  

const getModelsLatestQueryKey = () => {
    return ['models','latest'] as const;
    }

    
export const useModelsLatestQueryOptions = <TData = Awaited<ReturnType<typeof modelsLatest>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsLatest>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelsLatestQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelsLatest>>> = ({ signal }) => modelsLatest(signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelsLatest>>, TError, TData> 
}

export type ModelsLatestQueryResult = NonNullable<Awaited<ReturnType<typeof modelsLatest>>>
export type ModelsLatestQueryError = ErrorType<unknown>


/**
 * @summary Latest Models
 */

export function useModelsLatest<TData = Awaited<ReturnType<typeof modelsLatest>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsLatest>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelsLatestQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Loaners
 */
export const modelLoaners = (
    slug: MaybeRef<string>,
    params?: MaybeRef<ModelLoanersParams>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
params = unref(params);
      
      return axiosClient<Models>(
      {url: `/models/${slug}/loaners`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelLoanersQueryKey = (slug: MaybeRef<string>,
    params?: MaybeRef<ModelLoanersParams>,) => {
    return ['models',slug,'loaners', ...(params ? [params]: [])] as const;
    }

    
export const useModelLoanersQueryOptions = <TData = Awaited<ReturnType<typeof modelLoaners>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>,
    params?: MaybeRef<ModelLoanersParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelLoaners>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelLoanersQueryKey(slug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelLoaners>>> = ({ signal }) => modelLoaners(slug,params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelLoaners>>, TError, TData> 
}

export type ModelLoanersQueryResult = NonNullable<Awaited<ReturnType<typeof modelLoaners>>>
export type ModelLoanersQueryError = ErrorType<StandardError>


/**
 * @summary Model Loaners
 */

export function useModelLoaners<TData = Awaited<ReturnType<typeof modelLoaners>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>,
    params?: MaybeRef<ModelLoanersParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelLoaners>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelLoanersQueryOptions(slug,params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Module Packages
 */
export const modelModulePackages = (
    slug: MaybeRef<string>,
    params?: MaybeRef<ModelModulePackagesParams>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
params = unref(params);
      
      return axiosClient<ModelModulePackages>(
      {url: `/models/${slug}/module-packages`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelModulePackagesQueryKey = (slug: MaybeRef<string>,
    params?: MaybeRef<ModelModulePackagesParams>,) => {
    return ['models',slug,'module-packages', ...(params ? [params]: [])] as const;
    }

    
export const useModelModulePackagesQueryOptions = <TData = Awaited<ReturnType<typeof modelModulePackages>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>,
    params?: MaybeRef<ModelModulePackagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelModulePackages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelModulePackagesQueryKey(slug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelModulePackages>>> = ({ signal }) => modelModulePackages(slug,params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelModulePackages>>, TError, TData> 
}

export type ModelModulePackagesQueryResult = NonNullable<Awaited<ReturnType<typeof modelModulePackages>>>
export type ModelModulePackagesQueryError = ErrorType<StandardError>


/**
 * @summary Model Module Packages
 */

export function useModelModulePackages<TData = Awaited<ReturnType<typeof modelModulePackages>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>,
    params?: MaybeRef<ModelModulePackagesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelModulePackages>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelModulePackagesQueryOptions(slug,params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Modules
 */
export const modelModules = (
    slug: MaybeRef<string>,
    params?: MaybeRef<ModelModulesParams>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
params = unref(params);
      
      return axiosClient<ModelModules>(
      {url: `/models/${slug}/modules`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelModulesQueryKey = (slug: MaybeRef<string>,
    params?: MaybeRef<ModelModulesParams>,) => {
    return ['models',slug,'modules', ...(params ? [params]: [])] as const;
    }

    
export const useModelModulesQueryOptions = <TData = Awaited<ReturnType<typeof modelModules>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>,
    params?: MaybeRef<ModelModulesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelModules>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelModulesQueryKey(slug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelModules>>> = ({ signal }) => modelModules(slug,params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelModules>>, TError, TData> 
}

export type ModelModulesQueryResult = NonNullable<Awaited<ReturnType<typeof modelModules>>>
export type ModelModulesQueryError = ErrorType<StandardError>


/**
 * @summary Model Modules
 */

export function useModelModules<TData = Awaited<ReturnType<typeof modelModules>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>,
    params?: MaybeRef<ModelModulesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelModules>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelModulesQueryOptions(slug,params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Paints
 */
export const modelPaints = (
    slug: MaybeRef<string>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
      
      return axiosClient<ModelPaint[]>(
      {url: `/models/${slug}/paints`, method: 'GET', signal
    },
      );
    }
  

const getModelPaintsQueryKey = (slug: MaybeRef<string>,) => {
    return ['models',slug,'paints'] as const;
    }

    
export const useModelPaintsQueryOptions = <TData = Awaited<ReturnType<typeof modelPaints>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelPaints>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelPaintsQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelPaints>>> = ({ signal }) => modelPaints(slug, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelPaints>>, TError, TData> 
}

export type ModelPaintsQueryResult = NonNullable<Awaited<ReturnType<typeof modelPaints>>>
export type ModelPaintsQueryError = ErrorType<StandardError>


/**
 * @summary Model Paints
 */

export function useModelPaints<TData = Awaited<ReturnType<typeof modelPaints>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelPaints>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelPaintsQueryOptions(slug,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Detail
 */
export const model = (
    slug: MaybeRef<string>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
      
      return axiosClient<ModelExtended>(
      {url: `/models/${slug}`, method: 'GET', signal
    },
      );
    }
  

const getModelQueryKey = (slug: MaybeRef<string>,) => {
    return ['models',slug] as const;
    }

    
export const useModelQueryOptions = <TData = Awaited<ReturnType<typeof model>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof model>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof model>>> = ({ signal }) => model(slug, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof model>>, TError, TData> 
}

export type ModelQueryResult = NonNullable<Awaited<ReturnType<typeof model>>>
export type ModelQueryError = ErrorType<StandardError>


/**
 * @summary Model Detail
 */

export function useModel<TData = Awaited<ReturnType<typeof model>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof model>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelQueryOptions(slug,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Available Model-Slugs
 */
export const modelsSlugs = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClient<void>(
      {url: `/models/slugs`, method: 'GET', signal
    },
      );
    }
  

const getModelsSlugsQueryKey = () => {
    return ['models','slugs'] as const;
    }

    
export const useModelsSlugsQueryOptions = <TData = Awaited<ReturnType<typeof modelsSlugs>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsSlugs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelsSlugsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelsSlugs>>> = ({ signal }) => modelsSlugs(signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelsSlugs>>, TError, TData> 
}

export type ModelsSlugsQueryResult = NonNullable<Awaited<ReturnType<typeof modelsSlugs>>>
export type ModelsSlugsQueryError = ErrorType<unknown>


/**
 * @summary Available Model-Slugs
 */

export function useModelsSlugs<TData = Awaited<ReturnType<typeof modelsSlugs>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsSlugs>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelsSlugsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Snubcrafts
 */
export const modelSnubCrafts = (
    slug: MaybeRef<string>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
      
      return axiosClient<Model[]>(
      {url: `/models/${slug}/snub-crafts`, method: 'GET', signal
    },
      );
    }
  

const getModelSnubCraftsQueryKey = (slug: MaybeRef<string>,) => {
    return ['models',slug,'snub-crafts'] as const;
    }

    
export const useModelSnubCraftsQueryOptions = <TData = Awaited<ReturnType<typeof modelSnubCrafts>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelSnubCrafts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelSnubCraftsQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelSnubCrafts>>> = ({ signal }) => modelSnubCrafts(slug, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelSnubCrafts>>, TError, TData> 
}

export type ModelSnubCraftsQueryResult = NonNullable<Awaited<ReturnType<typeof modelSnubCrafts>>>
export type ModelSnubCraftsQueryError = ErrorType<StandardError>


/**
 * @summary Model Snubcrafts
 */

export function useModelSnubCrafts<TData = Awaited<ReturnType<typeof modelSnubCrafts>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelSnubCrafts>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelSnubCraftsQueryOptions(slug,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Updated Models
 */
export const modelsUpdated = (
    params?: MaybeRef<ModelsUpdatedParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return axiosClient<void>(
      {url: `/models/updated`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelsUpdatedQueryKey = (params?: MaybeRef<ModelsUpdatedParams>,) => {
    return ['models','updated', ...(params ? [params]: [])] as const;
    }

    
export const useModelsUpdatedQueryOptions = <TData = Awaited<ReturnType<typeof modelsUpdated>>, TError = ErrorType<void>>(params?: MaybeRef<ModelsUpdatedParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsUpdated>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelsUpdatedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelsUpdated>>> = ({ signal }) => modelsUpdated(params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelsUpdated>>, TError, TData> 
}

export type ModelsUpdatedQueryResult = NonNullable<Awaited<ReturnType<typeof modelsUpdated>>>
export type ModelsUpdatedQueryError = ErrorType<void>


/**
 * @summary Updated Models
 */

export function useModelsUpdated<TData = Awaited<ReturnType<typeof modelsUpdated>>, TError = ErrorType<void>>(
 params?: MaybeRef<ModelsUpdatedParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsUpdated>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelsUpdatedQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Upgrades
 */
export const modelUpgrades = (
    slug: MaybeRef<string>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
      
      return axiosClient<ModelUpgrade[]>(
      {url: `/models/${slug}/upgrades`, method: 'GET', signal
    },
      );
    }
  

const getModelUpgradesQueryKey = (slug: MaybeRef<string>,) => {
    return ['models',slug,'upgrades'] as const;
    }

    
export const useModelUpgradesQueryOptions = <TData = Awaited<ReturnType<typeof modelUpgrades>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelUpgrades>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelUpgradesQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelUpgrades>>> = ({ signal }) => modelUpgrades(slug, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelUpgrades>>, TError, TData> 
}

export type ModelUpgradesQueryResult = NonNullable<Awaited<ReturnType<typeof modelUpgrades>>>
export type ModelUpgradesQueryError = ErrorType<StandardError>


/**
 * @summary Model Upgrades
 */

export function useModelUpgrades<TData = Awaited<ReturnType<typeof modelUpgrades>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelUpgrades>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelUpgradesQueryOptions(slug,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Variants
 */
export const modelVariants = (
    slug: MaybeRef<string>,
    params?: MaybeRef<ModelVariantsParams>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
params = unref(params);
      
      return axiosClient<Models>(
      {url: `/models/${slug}/variants`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelVariantsQueryKey = (slug: MaybeRef<string>,
    params?: MaybeRef<ModelVariantsParams>,) => {
    return ['models',slug,'variants', ...(params ? [params]: [])] as const;
    }

    
export const useModelVariantsQueryOptions = <TData = Awaited<ReturnType<typeof modelVariants>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>,
    params?: MaybeRef<ModelVariantsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelVariants>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelVariantsQueryKey(slug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelVariants>>> = ({ signal }) => modelVariants(slug,params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelVariants>>, TError, TData> 
}

export type ModelVariantsQueryResult = NonNullable<Awaited<ReturnType<typeof modelVariants>>>
export type ModelVariantsQueryError = ErrorType<StandardError>


/**
 * @summary Model Variants
 */

export function useModelVariants<TData = Awaited<ReturnType<typeof modelVariants>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>,
    params?: MaybeRef<ModelVariantsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelVariants>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelVariantsQueryOptions(slug,params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Model Videos
 */
export const modelVideos = (
    slug: MaybeRef<string>,
    params?: MaybeRef<ModelVideosParams>,
 signal?: AbortSignal
) => {
      slug = unref(slug);
params = unref(params);
      
      return axiosClient<Videos>(
      {url: `/models/${slug}/videos`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelVideosQueryKey = (slug: MaybeRef<string>,
    params?: MaybeRef<ModelVideosParams>,) => {
    return ['models',slug,'videos', ...(params ? [params]: [])] as const;
    }

    
export const useModelVideosQueryOptions = <TData = Awaited<ReturnType<typeof modelVideos>>, TError = ErrorType<StandardError>>(slug: MaybeRef<string>,
    params?: MaybeRef<ModelVideosParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelVideos>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelVideosQueryKey(slug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelVideos>>> = ({ signal }) => modelVideos(slug,params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelVideos>>, TError, TData> 
}

export type ModelVideosQueryResult = NonNullable<Awaited<ReturnType<typeof modelVideos>>>
export type ModelVideosQueryError = ErrorType<StandardError>


/**
 * @summary Model Videos
 */

export function useModelVideos<TData = Awaited<ReturnType<typeof modelVideos>>, TError = ErrorType<StandardError>>(
 slug: MaybeRef<string>,
    params?: MaybeRef<ModelVideosParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelVideos>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelVideosQueryOptions(slug,params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Models with Docks
 */
export const modelsWithDocks = (
    params?: MaybeRef<ModelsWithDocksParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return axiosClient<Models>(
      {url: `/models/with-docks`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getModelsWithDocksQueryKey = (params?: MaybeRef<ModelsWithDocksParams>,) => {
    return ['models','with-docks', ...(params ? [params]: [])] as const;
    }

    
export const useModelsWithDocksQueryOptions = <TData = Awaited<ReturnType<typeof modelsWithDocks>>, TError = ErrorType<unknown>>(params?: MaybeRef<ModelsWithDocksParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsWithDocks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getModelsWithDocksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof modelsWithDocks>>> = ({ signal }) => modelsWithDocks(params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof modelsWithDocks>>, TError, TData> 
}

export type ModelsWithDocksQueryResult = NonNullable<Awaited<ReturnType<typeof modelsWithDocks>>>
export type ModelsWithDocksQueryError = ErrorType<unknown>


/**
 * @summary Models with Docks
 */

export function useModelsWithDocks<TData = Awaited<ReturnType<typeof modelsWithDocks>>, TError = ErrorType<unknown>>(
 params?: MaybeRef<ModelsWithDocksParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof modelsWithDocks>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useModelsWithDocksQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}





export const getModelsEmbedResponseMock = (): Model[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getModelHardpointsResponseMock = (): ModelHardpoints200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`},{id: faker.string.uuid(), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelHardpointCategoryEnum)), undefined]), categoryLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), group: faker.helpers.arrayElement(Object.values(ModelHardpointGroupEnum)), itemSlots: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), key: faker.string.alpha(20), loadoutIdentifier: faker.helpers.arrayElement([faker.string.uuid(), undefined]), loadouts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), name: faker.string.alpha(20)})), undefined]), mount: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelHardpointSizeEnum)), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), subCategory: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelHardpointSubCategoryEnum)), undefined]), subCategoryLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement(Object.values(ModelHardpointTypeEnum)), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`},]))))

export const getModelImagesResponseMock = (overrideResponse: Partial< Images > = {}): Images => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.uuid(), background: faker.datatype.boolean(), caption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gallery: faker.helpers.arrayElement([{id: faker.string.uuid(), type: faker.string.alpha(20), name: faker.string.alpha(20), slug: faker.string.alpha(20)}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getModelsResponseMock = (overrideResponse: Partial< Models > = {}): Models => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getModelsLatestResponseMock = (): Model[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getModelLoanersResponseMock = (overrideResponse: Partial< Models > = {}): Models => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getModelModulePackagesResponseMock = (overrideResponse: Partial< ModelModulePackages > = {}): ModelModulePackages => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metrics: faker.helpers.arrayElement([{cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), productionStatus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), ...overrideResponse})

export const getModelModulesResponseMock = (overrideResponse: Partial< ModelModules > = {}): ModelModules => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metrics: faker.helpers.arrayElement([{cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), productionStatus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getModelPaintsResponseMock = (): ModelPaint[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, nameWithModel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, angledView: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), fleetchartImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), sideView: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topView: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined])})))

export const getModelResponseMock = (overrideResponse: Partial< ModelExtended > = {}): ModelExtended => ({id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), self: faker.helpers.arrayElement([faker.internet.url(), undefined]), frontend: faker.helpers.arrayElement([faker.internet.url(), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dockCounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({count: faker.number.int({min: undefined, max: undefined}), size: faker.string.alpha(20), type: faker.string.alpha(20), typeLabel: faker.string.alpha(20)})), ...overrideResponse})

export const getModelSnubCraftsResponseMock = (): Model[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getModelUpgradesResponseMock = (): ModelUpgrade[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined])})))

export const getModelVariantsResponseMock = (overrideResponse: Partial< Models > = {}): Models => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getModelVideosResponseMock = (overrideResponse: Partial< Videos > = {}): Videos => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), type: faker.helpers.arrayElement(Object.values(VideoTypeEnum)), url: faker.internet.url(), videoId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getModelsWithDocksResponseMock = (overrideResponse: Partial< Models > = {}): Models => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})


export const getModelStoreImageMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/models/:slug/store-image', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getModelFleetchartImageMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/models/:slug/fleetchart-image', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getModelsEmbedMockHandler = (overrideResponse?: Model[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Model[]> | Model[])) => {
  return http.get('*/models/embed', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelsEmbedResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelHardpointsMockHandler = (overrideResponse?: ModelHardpoints200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModelHardpoints200Item[]> | ModelHardpoints200Item[])) => {
  return http.get('*/models/:slug/hardpoints', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelHardpointsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelImagesMockHandler = (overrideResponse?: Images | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Images> | Images)) => {
  return http.get('*/models/:slug/images', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelImagesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelsMockHandler = (overrideResponse?: Models | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Models> | Models)) => {
  return http.get('*/models', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelsLatestMockHandler = (overrideResponse?: Model[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Model[]> | Model[])) => {
  return http.get('*/models/latest', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelsLatestResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelLoanersMockHandler = (overrideResponse?: Models | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Models> | Models)) => {
  return http.get('*/models/:slug/loaners', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelLoanersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelModulePackagesMockHandler = (overrideResponse?: ModelModulePackages | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModelModulePackages> | ModelModulePackages)) => {
  return http.get('*/models/:slug/module-packages', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelModulePackagesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelModulesMockHandler = (overrideResponse?: ModelModules | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModelModules> | ModelModules)) => {
  return http.get('*/models/:slug/modules', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelModulesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelPaintsMockHandler = (overrideResponse?: ModelPaint[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModelPaint[]> | ModelPaint[])) => {
  return http.get('*/models/:slug/paints', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelPaintsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelMockHandler = (overrideResponse?: ModelExtended | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModelExtended> | ModelExtended)) => {
  return http.get('*/models/:slug', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelsSlugsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/models/slugs', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getModelSnubCraftsMockHandler = (overrideResponse?: Model[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Model[]> | Model[])) => {
  return http.get('*/models/:slug/snub-crafts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelSnubCraftsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelsUpdatedMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/models/updated', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getModelUpgradesMockHandler = (overrideResponse?: ModelUpgrade[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModelUpgrade[]> | ModelUpgrade[])) => {
  return http.get('*/models/:slug/upgrades', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelUpgradesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelVariantsMockHandler = (overrideResponse?: Models | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Models> | Models)) => {
  return http.get('*/models/:slug/variants', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelVariantsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelVideosMockHandler = (overrideResponse?: Videos | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Videos> | Videos)) => {
  return http.get('*/models/:slug/videos', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelVideosResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getModelsWithDocksMockHandler = (overrideResponse?: Models | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Models> | Models)) => {
  return http.get('*/models/with-docks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getModelsWithDocksResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getModelsMock = () => [
  getModelStoreImageMockHandler(),
  getModelFleetchartImageMockHandler(),
  getModelsEmbedMockHandler(),
  getModelHardpointsMockHandler(),
  getModelImagesMockHandler(),
  getModelsMockHandler(),
  getModelsLatestMockHandler(),
  getModelLoanersMockHandler(),
  getModelModulePackagesMockHandler(),
  getModelModulesMockHandler(),
  getModelPaintsMockHandler(),
  getModelMockHandler(),
  getModelsSlugsMockHandler(),
  getModelSnubCraftsMockHandler(),
  getModelsUpdatedMockHandler(),
  getModelUpgradesMockHandler(),
  getModelVariantsMockHandler(),
  getModelVideosMockHandler(),
  getModelsWithDocksMockHandler()
]
