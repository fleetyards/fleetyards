/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  FleetInviteUrlCreateInput,
  FleetInviteUrlsParams,
  FleetMembershipCreateInput,
  StandardError,
  ValidationError
} from '../models';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  FleetMembershipRoleEnum,
  FleetMembershipShipsFilterEnum,
  FleetMembershipStatusEnum
} from '../models';
import type {
  FleetInviteUrl,
  FleetMember
} from '../models';

import { axiosClient } from '../../axiosClient';
import type { ErrorType } from '../../axiosClient';
import { customQueryOptions } from '../../customQueryOptions';





/**
 * @summary Create Fleet Invite Url
 */
export const createFleetInviteUrl = (
    fleetSlug: MaybeRef<string>,
    fleetInviteUrlCreateInput: MaybeRef<FleetInviteUrlCreateInput>,
 signal?: AbortSignal
) => {
      fleetSlug = unref(fleetSlug);
fleetInviteUrlCreateInput = unref(fleetInviteUrlCreateInput);
      
      return axiosClient<FleetInviteUrl>(
      {url: `/fleets/${fleetSlug}/invite-urls`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: fleetInviteUrlCreateInput, signal
    },
      );
    }
  


export const getCreateFleetInviteUrlMutationOptions = <TError = ErrorType<ValidationError | StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFleetInviteUrl>>, TError,{fleetSlug: string;data: FleetInviteUrlCreateInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createFleetInviteUrl>>, TError,{fleetSlug: string;data: FleetInviteUrlCreateInput}, TContext> => {
    
const mutationKey = ['createFleetInviteUrl'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createFleetInviteUrl>>, {fleetSlug: string;data: FleetInviteUrlCreateInput}> = (props) => {
          const {fleetSlug,data} = props ?? {};

          return  createFleetInviteUrl(fleetSlug,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateFleetInviteUrlMutationResult = NonNullable<Awaited<ReturnType<typeof createFleetInviteUrl>>>
    export type CreateFleetInviteUrlMutationBody = FleetInviteUrlCreateInput
    export type CreateFleetInviteUrlMutationError = ErrorType<ValidationError | StandardError>

    /**
 * @summary Create Fleet Invite Url
 */
export const useCreateFleetInviteUrl = <TError = ErrorType<ValidationError | StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFleetInviteUrl>>, TError,{fleetSlug: string;data: FleetInviteUrlCreateInput}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof createFleetInviteUrl>>,
        TError,
        {fleetSlug: string;data: FleetInviteUrlCreateInput},
        TContext
      > => {

      const mutationOptions = getCreateFleetInviteUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Fleet Invite Urls List
 */
export const fleetInviteUrls = (
    fleetSlug: MaybeRef<string>,
    params?: MaybeRef<FleetInviteUrlsParams>,
 signal?: AbortSignal
) => {
      fleetSlug = unref(fleetSlug);
params = unref(params);
      
      return axiosClient<FleetInviteUrl[]>(
      {url: `/fleets/${fleetSlug}/invite-urls`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getFleetInviteUrlsQueryKey = (fleetSlug: MaybeRef<string>,
    params?: MaybeRef<FleetInviteUrlsParams>,) => {
    return ['fleets',fleetSlug,'invite-urls', ...(params ? [params]: [])] as const;
    }

    
export const useFleetInviteUrlsQueryOptions = <TData = Awaited<ReturnType<typeof fleetInviteUrls>>, TError = ErrorType<StandardError>>(fleetSlug: MaybeRef<string>,
    params?: MaybeRef<FleetInviteUrlsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fleetInviteUrls>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getFleetInviteUrlsQueryKey(fleetSlug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof fleetInviteUrls>>> = ({ signal }) => fleetInviteUrls(fleetSlug,params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof fleetInviteUrls>>, TError, TData> 
}

export type FleetInviteUrlsQueryResult = NonNullable<Awaited<ReturnType<typeof fleetInviteUrls>>>
export type FleetInviteUrlsQueryError = ErrorType<StandardError>


/**
 * @summary Fleet Invite Urls List
 */

export function useFleetInviteUrls<TData = Awaited<ReturnType<typeof fleetInviteUrls>>, TError = ErrorType<StandardError>>(
 fleetSlug: MaybeRef<string>,
    params?: MaybeRef<FleetInviteUrlsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof fleetInviteUrls>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useFleetInviteUrlsQueryOptions(fleetSlug,params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * You are not the owner of this Fleet
 * @summary Remove Fleet Invite Url
 */
export const destroyFleetInviteUrl = (
    fleetSlug: MaybeRef<string>,
    token: MaybeRef<string>,
 ) => {
      fleetSlug = unref(fleetSlug);
token = unref(token);
      
      return axiosClient<void>(
      {url: `/fleets/${fleetSlug}/invite-urls/${token}`, method: 'DELETE'
    },
      );
    }
  


export const getDestroyFleetInviteUrlMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof destroyFleetInviteUrl>>, TError,{fleetSlug: string;token: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof destroyFleetInviteUrl>>, TError,{fleetSlug: string;token: string}, TContext> => {
    
const mutationKey = ['destroyFleetInviteUrl'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof destroyFleetInviteUrl>>, {fleetSlug: string;token: string}> = (props) => {
          const {fleetSlug,token} = props ?? {};

          return  destroyFleetInviteUrl(fleetSlug,token,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DestroyFleetInviteUrlMutationResult = NonNullable<Awaited<ReturnType<typeof destroyFleetInviteUrl>>>
    
    export type DestroyFleetInviteUrlMutationError = ErrorType<StandardError>

    /**
 * @summary Remove Fleet Invite Url
 */
export const useDestroyFleetInviteUrl = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof destroyFleetInviteUrl>>, TError,{fleetSlug: string;token: string}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof destroyFleetInviteUrl>>,
        TError,
        {fleetSlug: string;token: string},
        TContext
      > => {

      const mutationOptions = getDestroyFleetInviteUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * User is already a member of this fleet
 * @summary Create Fleet Membership by Invite
 */
export const useFleetInvite = (
    fleetMembershipCreateInput: MaybeRef<FleetMembershipCreateInput>,
 signal?: AbortSignal
) => {
      fleetMembershipCreateInput = unref(fleetMembershipCreateInput);
      
      return axiosClient<FleetMember>(
      {url: `/fleets/use-invite`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: fleetMembershipCreateInput, signal
    },
      );
    }
  


export const getUseFleetInviteMutationOptions = <TError = ErrorType<ValidationError | StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof useFleetInvite>>, TError,{data: FleetMembershipCreateInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof useFleetInvite>>, TError,{data: FleetMembershipCreateInput}, TContext> => {
    
const mutationKey = ['useFleetInvite'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof useFleetInvite>>, {data: FleetMembershipCreateInput}> = (props) => {
          const {data} = props ?? {};

          return  useFleetInvite(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UseFleetInviteMutationResult = NonNullable<Awaited<ReturnType<typeof useFleetInvite>>>
    export type UseFleetInviteMutationBody = FleetMembershipCreateInput
    export type UseFleetInviteMutationError = ErrorType<ValidationError | StandardError>

    /**
 * @summary Create Fleet Membership by Invite
 */
export const useUseFleetInvite = <TError = ErrorType<ValidationError | StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof useFleetInvite>>, TError,{data: FleetMembershipCreateInput}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof useFleetInvite>>,
        TError,
        {data: FleetMembershipCreateInput},
        TContext
      > => {

      const mutationOptions = getUseFleetInviteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

export const getCreateFleetInviteUrlResponseMock = (overrideResponse: Partial< FleetInviteUrl > = {}): FleetInviteUrl => ({token: faker.string.alpha(20), url: faker.internet.url(), expiresAfter: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), expiresAfterLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), expired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), limit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), limitReached: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getFleetInviteUrlsResponseMock = (): FleetInviteUrl[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({token: faker.string.alpha(20), url: faker.internet.url(), expiresAfter: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), expiresAfterLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), expired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), limit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), limitReached: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getUseFleetInviteResponseMock = (overrideResponse: Partial< FleetMember > = {}): FleetMember => ({id: faker.string.uuid(), username: faker.string.alpha(20), fleetRole: {id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), resourceAccess: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20)))}, role: faker.helpers.arrayElement(Object.values(FleetMembershipRoleEnum)), roleLabel: faker.string.alpha(20), status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(FleetMembershipStatusEnum)), undefined]), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiHandle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), homepage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discord: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), youtube: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), twitch: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guilded: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), shipsFilter: faker.helpers.arrayElement(Object.values(FleetMembershipShipsFilterEnum)), hangarGroupId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), fleetSlug: faker.string.alpha(20), fleetName: faker.string.alpha(20), fleet: faker.helpers.arrayElement([{id: faker.string.uuid(), fid: faker.string.alpha(20), rsiSid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ts: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discord: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), youtube: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), twitch: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guilded: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), homepage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), publicFleet: faker.datatype.boolean(), publicFleetStats: faker.datatype.boolean(), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), backgroundImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), hangarUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), invitedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), invitedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), requestedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), requestedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), acceptedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), acceptedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), declinedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), declinedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), isDestroyAllowed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})


export const getCreateFleetInviteUrlMockHandler = (overrideResponse?: FleetInviteUrl | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FleetInviteUrl> | FleetInviteUrl)) => {
  return http.post('*/fleets/:fleetSlug/invite-urls', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateFleetInviteUrlResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFleetInviteUrlsMockHandler = (overrideResponse?: FleetInviteUrl[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FleetInviteUrl[]> | FleetInviteUrl[])) => {
  return http.get('*/fleets/:fleetSlug/invite-urls', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getFleetInviteUrlsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDestroyFleetInviteUrlMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/fleets/:fleetSlug/invite-urls/:token', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getUseFleetInviteMockHandler = (overrideResponse?: FleetMember | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FleetMember> | FleetMember)) => {
  return http.post('*/fleets/use-invite', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUseFleetInviteResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getFleetInviteUrlsMock = () => [
  getCreateFleetInviteUrlMockHandler(),
  getFleetInviteUrlsMockHandler(),
  getDestroyFleetInviteUrlMockHandler(),
  getUseFleetInviteMockHandler()
]
