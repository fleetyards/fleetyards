/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net Command API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  StandardError,
  VehiclesParams
} from '../models';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  BoughtViaEnum,
  ComponentItemClassEnum,
  HardpointCategoryEnum,
  HardpointGroupEnum,
  HardpointSourceEnum,
  ItemPriceItemTypeEnum,
  ItemPriceTimeRangeEnum,
  ItemPriceTypeEnum,
  ModelProductionStatusEnum,
  ThrusterClassEnum
} from '../models';
import type {
  Vehicles
} from '../models';

import { axiosClient } from '../../axiosAdminClient';
import type { ErrorType } from '../../axiosAdminClient';
import { customQueryOptions } from '../../customQueryOptions';





/**
 * @summary Vehicles list
 */
export const vehicles = (
    params?: MaybeRef<VehiclesParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return axiosClient<Vehicles>(
      {url: `/vehicles`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

const getVehiclesQueryKey = (params?: MaybeRef<VehiclesParams>,) => {
    return ['vehicles', ...(params ? [params]: [])] as const;
    }

    
export const useVehiclesQueryOptions = <TData = Awaited<ReturnType<typeof vehicles>>, TError = ErrorType<StandardError>>(params?: MaybeRef<VehiclesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehicles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getVehiclesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof vehicles>>> = ({ signal }) => vehicles(params, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof vehicles>>, TError, TData> 
}

export type VehiclesQueryResult = NonNullable<Awaited<ReturnType<typeof vehicles>>>
export type VehiclesQueryError = ErrorType<StandardError>


/**
 * @summary Vehicles list
 */

export function useVehicles<TData = Awaited<ReturnType<typeof vehicles>>, TError = ErrorType<StandardError>>(
 params?: MaybeRef<VehiclesParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehicles>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useVehiclesQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}





export const getVehiclesResponseMock = (overrideResponse: Partial< Vehicles > = {}): Vehicles => ({meta: {pagination: faker.helpers.arrayElement([{totalCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), currentPage: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined}), defaultPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxPerPage: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), perPageSteps: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([faker.string.alpha(20),faker.number.int({min: undefined, max: undefined}),]))), undefined])}, undefined])}, items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), serial: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), user: {id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), username: faker.string.alpha(20), email: faker.string.alpha(20), unconfirmedEmail: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), avatar: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiHandle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), discord: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), youtube: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), twitch: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guilded: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), homepage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), saleNotify: faker.datatype.boolean(), publicHangar: faker.datatype.boolean(), publicHangarUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), publicHangarLoaners: faker.datatype.boolean(), publicWishlist: faker.datatype.boolean(), publicWishlistUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hideOwner: faker.datatype.boolean(), twoFactorRequired: faker.datatype.boolean(), twoFactorQrCodeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), twoFactorProvisioningUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hangarUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), confirmedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastActiveAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, alternativeNames: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), boughtVia: faker.helpers.arrayElement(Object.values(BoughtViaEnum)), boughtViaLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), flagship: faker.datatype.boolean(), hangarGroupIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), hangarGroups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), color: faker.string.alpha(20), public: faker.datatype.boolean(), sort: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), vehiclesCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), loaner: faker.datatype.boolean(), model: {id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.uuid()}, undefined]), media: {angledView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), angledViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), frontViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), storeImage: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), rsiStoreImage: faker.helpers.arrayElement([{large: faker.internet.url(), medium: faker.internet.url(), small: faker.internet.url(), source: faker.internet.url()}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hidden: faker.datatype.boolean(), active: faker.datatype.boolean(), scLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scBeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, modelModuleIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), modelUpgradeIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), modulePackage: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metrics: faker.helpers.arrayElement([{cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {storeImage: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined])}, pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), productionStatus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.uuid()}, undefined]), hardpoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.uuid()}, undefined]), media: {storeImage: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, model: {id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.uuid()}, undefined]), media: {angledView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), angledViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), frontViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), storeImage: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), rsiStoreImage: faker.helpers.arrayElement([{large: faker.internet.url(), medium: faker.internet.url(), small: faker.internet.url(), source: faker.internet.url()}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hidden: faker.datatype.boolean(), active: faker.datatype.boolean(), scLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scBeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}})), model: {id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.uuid()}, undefined]), media: {angledView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), angledViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), frontViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), storeImage: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), rsiStoreImage: faker.helpers.arrayElement([{large: faker.internet.url(), medium: faker.internet.url(), small: faker.internet.url(), source: faker.internet.url()}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hidden: faker.datatype.boolean(), active: faker.datatype.boolean(), scLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scBeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, media: {angledView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), storeImage: faker.helpers.arrayElement([{large: faker.internet.url(), medium: faker.internet.url(), small: faker.internet.url(), source: faker.internet.url()}, undefined]), topView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), nameVisible: faker.datatype.boolean(), paint: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {angledView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), storeImage: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), angledViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), frontView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), frontViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), rsiStoreImage: faker.helpers.arrayElement([{large: faker.internet.url(), medium: faker.internet.url(), small: faker.internet.url(), source: faker.internet.url()}, undefined]), topViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined])}, nameWithModel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, angledView: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), fleetchartImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), sideView: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topView: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), hidden: faker.datatype.boolean(), active: faker.datatype.boolean(), model: {id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.uuid()}, undefined]), media: {angledView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), angledViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), frontViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), storeImage: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), rsiStoreImage: faker.helpers.arrayElement([{large: faker.internet.url(), medium: faker.internet.url(), small: faker.internet.url(), source: faker.internet.url()}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hidden: faker.datatype.boolean(), active: faker.datatype.boolean(), scLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scBeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, undefined]), public: faker.datatype.boolean(), saleNotify: faker.datatype.boolean(), upgrade: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), media: {storeImage: faker.helpers.arrayElement([{large: faker.internet.url(), medium: faker.internet.url(), small: faker.internet.url(), source: faker.internet.url()}, undefined])}, model: {id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.uuid()}, undefined]), media: {angledView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), angledViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), frontViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), sideViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), storeImage: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topView: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), topViewColored: faker.helpers.arrayElement([{source: faker.internet.url(), small: faker.internet.url(), medium: faker.internet.url(), large: faker.internet.url(), xlarge: faker.internet.url(), width: faker.number.int({min: undefined, max: undefined}), height: faker.number.int({min: undefined, max: undefined})}, undefined]), rsiStoreImage: faker.helpers.arrayElement([{large: faker.internet.url(), medium: faker.internet.url(), small: faker.internet.url(), source: faker.internet.url()}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hidden: faker.datatype.boolean(), active: faker.datatype.boolean(), scLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scBeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined])}, undefined]), wanted: faker.datatype.boolean(), hidden: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})


export const getVehiclesMockHandler = (overrideResponse?: Vehicles | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Vehicles> | Vehicles)) => {
  return http.get('*/vehicles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVehiclesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getVehiclesMock = () => [
  getVehiclesMockHandler()
]
