/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FleetYards.net Command API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { BarChartStats, StandardError, Stats } from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Stats most viewed Pages
 */
export const mostViewedPages = (signal?: AbortSignal) => {
  return axiosClient<BarChartStats[]>({
    url: `/stats/most-viewed-pages`,
    method: "GET",
    signal,
  });
};

export const getMostViewedPagesQueryKey = () => {
  return ["stats", "most-viewed-pages"] as const;
};

export const getMostViewedPagesQueryOptions = <
  TData = Awaited<ReturnType<typeof mostViewedPages>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof mostViewedPages>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getMostViewedPagesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof mostViewedPages>>> = ({
    signal,
  }) => mostViewedPages(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof mostViewedPages>>,
    TError,
    TData
  >;
};

export type MostViewedPagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof mostViewedPages>>
>;
export type MostViewedPagesQueryError = ErrorType<StandardError>;

/**
 * @summary Stats most viewed Pages
 */

export function useMostViewedPages<
  TData = Awaited<ReturnType<typeof mostViewedPages>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof mostViewedPages>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getMostViewedPagesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats Registrations per Month
 */
export const registrationsPerMonth = (signal?: AbortSignal) => {
  return axiosClient<BarChartStats[]>({
    url: `/stats/registrations-per-month`,
    method: "GET",
    signal,
  });
};

export const getRegistrationsPerMonthQueryKey = () => {
  return ["stats", "registrations-per-month"] as const;
};

export const getRegistrationsPerMonthQueryOptions = <
  TData = Awaited<ReturnType<typeof registrationsPerMonth>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof registrationsPerMonth>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getRegistrationsPerMonthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof registrationsPerMonth>>
  > = ({ signal }) => registrationsPerMonth(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof registrationsPerMonth>>,
    TError,
    TData
  >;
};

export type RegistrationsPerMonthQueryResult = NonNullable<
  Awaited<ReturnType<typeof registrationsPerMonth>>
>;
export type RegistrationsPerMonthQueryError = ErrorType<StandardError>;

/**
 * @summary Stats Registrations per Month
 */

export function useRegistrationsPerMonth<
  TData = Awaited<ReturnType<typeof registrationsPerMonth>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof registrationsPerMonth>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getRegistrationsPerMonthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats
 */
export const stats = (signal?: AbortSignal) => {
  return axiosClient<Stats>({
    url: `/stats/quick-stats`,
    method: "GET",
    signal,
  });
};

export const getStatsQueryKey = () => {
  return ["stats", "quick-stats"] as const;
};

export const getStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof stats>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof stats>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStatsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof stats>>> = ({
    signal,
  }) => stats(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof stats>>,
    TError,
    TData
  >;
};

export type StatsQueryResult = NonNullable<Awaited<ReturnType<typeof stats>>>;
export type StatsQueryError = ErrorType<StandardError>;

/**
 * @summary Stats
 */

export function useStats<
  TData = Awaited<ReturnType<typeof stats>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof stats>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getStatsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats Visits per Day
 */
export const visitsPerDay = (signal?: AbortSignal) => {
  return axiosClient<BarChartStats[]>({
    url: `/stats/visits-per-day`,
    method: "GET",
    signal,
  });
};

export const getVisitsPerDayQueryKey = () => {
  return ["stats", "visits-per-day"] as const;
};

export const getVisitsPerDayQueryOptions = <
  TData = Awaited<ReturnType<typeof visitsPerDay>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof visitsPerDay>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getVisitsPerDayQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof visitsPerDay>>> = ({
    signal,
  }) => visitsPerDay(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof visitsPerDay>>,
    TError,
    TData
  >;
};

export type VisitsPerDayQueryResult = NonNullable<
  Awaited<ReturnType<typeof visitsPerDay>>
>;
export type VisitsPerDayQueryError = ErrorType<StandardError>;

/**
 * @summary Stats Visits per Day
 */

export function useVisitsPerDay<
  TData = Awaited<ReturnType<typeof visitsPerDay>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof visitsPerDay>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getVisitsPerDayQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats Visits per Month
 */
export const visitsPerMonth = (signal?: AbortSignal) => {
  return axiosClient<BarChartStats[]>({
    url: `/stats/visits-per-month`,
    method: "GET",
    signal,
  });
};

export const getVisitsPerMonthQueryKey = () => {
  return ["stats", "visits-per-month"] as const;
};

export const getVisitsPerMonthQueryOptions = <
  TData = Awaited<ReturnType<typeof visitsPerMonth>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof visitsPerMonth>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getVisitsPerMonthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof visitsPerMonth>>> = ({
    signal,
  }) => visitsPerMonth(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof visitsPerMonth>>,
    TError,
    TData
  >;
};

export type VisitsPerMonthQueryResult = NonNullable<
  Awaited<ReturnType<typeof visitsPerMonth>>
>;
export type VisitsPerMonthQueryError = ErrorType<StandardError>;

/**
 * @summary Stats Visits per Month
 */

export function useVisitsPerMonth<
  TData = Awaited<ReturnType<typeof visitsPerMonth>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof visitsPerMonth>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getVisitsPerMonthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
