/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  FleetInviteUrl,
  FleetInviteUrlCreateInput,
  FleetMember,
  FleetMembershipCreateInput,
  InviteUrlsParams,
  StandardError,
  ValidationError,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Create Invite Url
 */
export const createInviteUrl = (
  fleetSlug: MaybeRef<string>,
  fleetInviteUrlCreateInput: MaybeRef<FleetInviteUrlCreateInput>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  fleetInviteUrlCreateInput = unref(fleetInviteUrlCreateInput);

  return axiosClient<FleetInviteUrl>({
    url: `/fleets/${fleetSlug}/invite-urls`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: fleetInviteUrlCreateInput,
    signal,
  });
};

export const getCreateInviteUrlMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createInviteUrl>>,
    TError,
    { fleetSlug: string; data: FleetInviteUrlCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createInviteUrl>>,
  TError,
  { fleetSlug: string; data: FleetInviteUrlCreateInput },
  TContext
> => {
  const mutationKey = ["createInviteUrl"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createInviteUrl>>,
    { fleetSlug: string; data: FleetInviteUrlCreateInput }
  > = (props) => {
    const { fleetSlug, data } = props ?? {};

    return createInviteUrl(fleetSlug, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateInviteUrlMutationResult = NonNullable<
  Awaited<ReturnType<typeof createInviteUrl>>
>;
export type CreateInviteUrlMutationBody = FleetInviteUrlCreateInput;
export type CreateInviteUrlMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Create Invite Url
 */
export const useCreateInviteUrl = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createInviteUrl>>,
    TError,
    { fleetSlug: string; data: FleetInviteUrlCreateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createInviteUrl>>,
  TError,
  { fleetSlug: string; data: FleetInviteUrlCreateInput },
  TContext
> => {
  const mutationOptions = getCreateInviteUrlMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Fleet Invite Urls List
 */
export const inviteUrls = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<InviteUrlsParams>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  params = unref(params);

  return axiosClient<FleetInviteUrl[]>({
    url: `/fleets/${fleetSlug}/invite-urls`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getInviteUrlsQueryKey = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<InviteUrlsParams>,
) => {
  return [
    "fleets",
    fleetSlug,
    "invite-urls",
    ...(params ? [params] : []),
  ] as const;
};

export const getInviteUrlsQueryOptions = <
  TData = Awaited<ReturnType<typeof inviteUrls>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<InviteUrlsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof inviteUrls>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getInviteUrlsQueryKey(fleetSlug, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof inviteUrls>>> = ({
    signal,
  }) => inviteUrls(fleetSlug, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(fleetSlug)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof inviteUrls>>, TError, TData>;
};

export type InviteUrlsQueryResult = NonNullable<
  Awaited<ReturnType<typeof inviteUrls>>
>;
export type InviteUrlsQueryError = ErrorType<StandardError>;

/**
 * @summary Fleet Invite Urls List
 */

export function useInviteUrls<
  TData = Awaited<ReturnType<typeof inviteUrls>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<InviteUrlsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof inviteUrls>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getInviteUrlsQueryOptions(fleetSlug, params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * You are not the owner of this Fleet
 * @summary Remove Invite Url
 */
export const removeInviteUrl = (
  fleetSlug: MaybeRef<string>,
  token: MaybeRef<string>,
) => {
  fleetSlug = unref(fleetSlug);
  token = unref(token);

  return axiosClient<void>({
    url: `/fleets/${fleetSlug}/invite-urls/${token}`,
    method: "DELETE",
  });
};

export const getRemoveInviteUrlMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeInviteUrl>>,
    TError,
    { fleetSlug: string; token: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeInviteUrl>>,
  TError,
  { fleetSlug: string; token: string },
  TContext
> => {
  const mutationKey = ["removeInviteUrl"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeInviteUrl>>,
    { fleetSlug: string; token: string }
  > = (props) => {
    const { fleetSlug, token } = props ?? {};

    return removeInviteUrl(fleetSlug, token);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveInviteUrlMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeInviteUrl>>
>;

export type RemoveInviteUrlMutationError = ErrorType<StandardError>;

/**
 * @summary Remove Invite Url
 */
export const useRemoveInviteUrl = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeInviteUrl>>,
    TError,
    { fleetSlug: string; token: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof removeInviteUrl>>,
  TError,
  { fleetSlug: string; token: string },
  TContext
> => {
  const mutationOptions = getRemoveInviteUrlMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * User is already a member of this fleet
 * @summary Create Membership by Invite
 */
export const useInvite = (
  fleetMembershipCreateInput: MaybeRef<FleetMembershipCreateInput>,
  signal?: AbortSignal,
) => {
  fleetMembershipCreateInput = unref(fleetMembershipCreateInput);

  return axiosClient<FleetMember>({
    url: `/fleets/use-invite`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: fleetMembershipCreateInput,
    signal,
  });
};

export const getUseInviteMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof useInvite>>,
    TError,
    { data: FleetMembershipCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof useInvite>>,
  TError,
  { data: FleetMembershipCreateInput },
  TContext
> => {
  const mutationKey = ["useInvite"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof useInvite>>,
    { data: FleetMembershipCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return useInvite(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UseInviteMutationResult = NonNullable<
  Awaited<ReturnType<typeof useInvite>>
>;
export type UseInviteMutationBody = FleetMembershipCreateInput;
export type UseInviteMutationError = ErrorType<ValidationError | StandardError>;

/**
 * @summary Create Membership by Invite
 */
export const useUseInvite = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof useInvite>>,
    TError,
    { data: FleetMembershipCreateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof useInvite>>,
  TError,
  { data: FleetMembershipCreateInput },
  TContext
> => {
  const mutationOptions = getUseInviteMutationOptions(options);

  return useMutation(mutationOptions);
};
