/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type { CommoditiesParams, Commodity, FilterOption } from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @deprecated
 * @summary Commodity Types
 */
export const dEPRECATEDcommodityTypes = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/commodities/types`,
    method: "GET",
    signal,
  });
};

export const getDEPRECATEDcommodityTypesQueryKey = () => {
  return ["commodities", "types"] as const;
};

export const getDEPRECATEDcommodityTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof dEPRECATEDcommodityTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof dEPRECATEDcommodityTypes>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getDEPRECATEDcommodityTypesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dEPRECATEDcommodityTypes>>
  > = ({ signal }) => dEPRECATEDcommodityTypes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof dEPRECATEDcommodityTypes>>,
    TError,
    TData
  >;
};

export type DEPRECATEDcommodityTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof dEPRECATEDcommodityTypes>>
>;
export type DEPRECATEDcommodityTypesQueryError = ErrorType<unknown>;

/**
 * @deprecated
 * @summary Commodity Types
 */

export function useDEPRECATEDcommodityTypes<
  TData = Awaited<ReturnType<typeof dEPRECATEDcommodityTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof dEPRECATEDcommodityTypes>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getDEPRECATEDcommodityTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Commodities list
 */
export const commodities = (
  params?: MaybeRef<CommoditiesParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Commodity[]>({
    url: `/commodities`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getCommoditiesQueryKey = (
  params?: MaybeRef<CommoditiesParams>,
) => {
  return ["commodities", ...(params ? [params] : [])] as const;
};

export const getCommoditiesQueryOptions = <
  TData = Awaited<ReturnType<typeof commodities>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<CommoditiesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof commodities>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getCommoditiesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof commodities>>> = ({
    signal,
  }) => commodities(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof commodities>>,
    TError,
    TData
  >;
};

export type CommoditiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof commodities>>
>;
export type CommoditiesQueryError = ErrorType<unknown>;

/**
 * @summary Commodities list
 */

export function useCommodities<
  TData = Awaited<ReturnType<typeof commodities>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<CommoditiesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof commodities>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getCommoditiesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
