/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  FilterOption,
  Shop,
  ShopCommoditiesParams,
  ShopCommodity,
  ShopsParams,
  StandardError,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Shop Commodity list
 */
export const shopCommodities = (
  stationSlug: MaybeRef<string>,
  slug: MaybeRef<string>,
  params?: MaybeRef<ShopCommoditiesParams>,
  signal?: AbortSignal,
) => {
  stationSlug = unref(stationSlug);
  slug = unref(slug);
  params = unref(params);

  return axiosClient<ShopCommodity[]>({
    url: `/stations/${stationSlug}/shops/${slug}/commodities`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getShopCommoditiesQueryKey = (
  stationSlug: MaybeRef<string>,
  slug: MaybeRef<string>,
  params?: MaybeRef<ShopCommoditiesParams>,
) => {
  return [
    "stations",
    stationSlug,
    "shops",
    slug,
    "commodities",
    ...(params ? [params] : []),
  ] as const;
};

export const getShopCommoditiesQueryOptions = <
  TData = Awaited<ReturnType<typeof shopCommodities>>,
  TError = ErrorType<StandardError>,
>(
  stationSlug: MaybeRef<string>,
  slug: MaybeRef<string>,
  params?: MaybeRef<ShopCommoditiesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shopCommodities>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getShopCommoditiesQueryKey(stationSlug, slug, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shopCommodities>>> = ({
    signal,
  }) => shopCommodities(stationSlug, slug, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(stationSlug) && unref(slug))),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof shopCommodities>>,
    TError,
    TData
  >;
};

export type ShopCommoditiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof shopCommodities>>
>;
export type ShopCommoditiesQueryError = ErrorType<StandardError>;

/**
 * @summary Shop Commodity list
 */

export function useShopCommodities<
  TData = Awaited<ReturnType<typeof shopCommodities>>,
  TError = ErrorType<StandardError>,
>(
  stationSlug: MaybeRef<string>,
  slug: MaybeRef<string>,
  params?: MaybeRef<ShopCommoditiesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shopCommodities>>,
        TError,
        TData
      >
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getShopCommoditiesQueryOptions(
    stationSlug,
    slug,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @deprecated
 * @summary Shop types
 */
export const dEPRECATEDshopsTypes = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/shops/shop-types`,
    method: "GET",
    signal,
  });
};

export const getDEPRECATEDshopsTypesQueryKey = () => {
  return ["shops", "shop-types"] as const;
};

export const getDEPRECATEDshopsTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof dEPRECATEDshopsTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof dEPRECATEDshopsTypes>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getDEPRECATEDshopsTypesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dEPRECATEDshopsTypes>>
  > = ({ signal }) => dEPRECATEDshopsTypes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof dEPRECATEDshopsTypes>>,
    TError,
    TData
  >;
};

export type DEPRECATEDshopsTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof dEPRECATEDshopsTypes>>
>;
export type DEPRECATEDshopsTypesQueryError = ErrorType<unknown>;

/**
 * @deprecated
 * @summary Shop types
 */

export function useDEPRECATEDshopsTypes<
  TData = Awaited<ReturnType<typeof dEPRECATEDshopsTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof dEPRECATEDshopsTypes>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getDEPRECATEDshopsTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Shops list
 */
export const shops = (params?: MaybeRef<ShopsParams>, signal?: AbortSignal) => {
  params = unref(params);

  return axiosClient<Shop[]>({
    url: `/shops`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getShopsQueryKey = (params?: MaybeRef<ShopsParams>) => {
  return ["shops", ...(params ? [params] : [])] as const;
};

export const getShopsQueryOptions = <
  TData = Awaited<ReturnType<typeof shops>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<ShopsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof shops>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getShopsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shops>>> = ({
    signal,
  }) => shops(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof shops>>,
    TError,
    TData
  >;
};

export type ShopsQueryResult = NonNullable<Awaited<ReturnType<typeof shops>>>;
export type ShopsQueryError = ErrorType<unknown>;

/**
 * @summary Shops list
 */

export function useShops<
  TData = Awaited<ReturnType<typeof shops>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<ShopsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof shops>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getShopsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Shop Detail
 */
export const shop = (
  stationSlug: MaybeRef<string>,
  slug: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  stationSlug = unref(stationSlug);
  slug = unref(slug);

  return axiosClient<Shop>({
    url: `/stations/${stationSlug}/shops/${slug}`,
    method: "GET",
    signal,
  });
};

export const getShopQueryKey = (
  stationSlug: MaybeRef<string>,
  slug: MaybeRef<string>,
) => {
  return ["stations", stationSlug, "shops", slug] as const;
};

export const getShopQueryOptions = <
  TData = Awaited<ReturnType<typeof shop>>,
  TError = ErrorType<StandardError>,
>(
  stationSlug: MaybeRef<string>,
  slug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof shop>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getShopQueryKey(stationSlug, slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shop>>> = ({
    signal,
  }) => shop(stationSlug, slug, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(stationSlug) && unref(slug))),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof shop>>, TError, TData>;
};

export type ShopQueryResult = NonNullable<Awaited<ReturnType<typeof shop>>>;
export type ShopQueryError = ErrorType<StandardError>;

/**
 * @summary Shop Detail
 */

export function useShop<
  TData = Awaited<ReturnType<typeof shop>>,
  TError = ErrorType<StandardError>,
>(
  stationSlug: MaybeRef<string>,
  slug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof shop>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getShopQueryOptions(stationSlug, slug, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
