/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";

import type { BarChartStats, PieChartStats, Stats } from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary Stats Components by Class
 */
export const componentsByClass = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/stats/components-by-class`,
    method: "GET",
    signal,
  });
};

const getComponentsByClassQueryKey = () => {
  return ["stats", "components-by-class"] as const;
};

export const useComponentsByClassQueryOptions = <
  TData = Awaited<ReturnType<typeof componentsByClass>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof componentsByClass>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getComponentsByClassQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof componentsByClass>>
  > = ({ signal }) => componentsByClass(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof componentsByClass>>,
    TError,
    TData
  >;
};

export type ComponentsByClassQueryResult = NonNullable<
  Awaited<ReturnType<typeof componentsByClass>>
>;
export type ComponentsByClassQueryError = ErrorType<unknown>;

/**
 * @summary Stats Components by Class
 */

export function useComponentsByClass<
  TData = Awaited<ReturnType<typeof componentsByClass>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof componentsByClass>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useComponentsByClassQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats Models by Classification
 */
export const modelsByClassification = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/stats/models-by-classification`,
    method: "GET",
    signal,
  });
};

const getModelsByClassificationQueryKey = () => {
  return ["stats", "models-by-classification"] as const;
};

export const useModelsByClassificationQueryOptions = <
  TData = Awaited<ReturnType<typeof modelsByClassification>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof modelsByClassification>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getModelsByClassificationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof modelsByClassification>>
  > = ({ signal }) => modelsByClassification(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof modelsByClassification>>,
    TError,
    TData
  >;
};

export type ModelsByClassificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof modelsByClassification>>
>;
export type ModelsByClassificationQueryError = ErrorType<unknown>;

/**
 * @summary Stats Models by Classification
 */

export function useModelsByClassification<
  TData = Awaited<ReturnType<typeof modelsByClassification>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof modelsByClassification>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useModelsByClassificationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats Models by Manufacturer
 */
export const modelsByManufacturer = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/stats/models-by-manufacturer`,
    method: "GET",
    signal,
  });
};

const getModelsByManufacturerQueryKey = () => {
  return ["stats", "models-by-manufacturer"] as const;
};

export const useModelsByManufacturerQueryOptions = <
  TData = Awaited<ReturnType<typeof modelsByManufacturer>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof modelsByManufacturer>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getModelsByManufacturerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof modelsByManufacturer>>
  > = ({ signal }) => modelsByManufacturer(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof modelsByManufacturer>>,
    TError,
    TData
  >;
};

export type ModelsByManufacturerQueryResult = NonNullable<
  Awaited<ReturnType<typeof modelsByManufacturer>>
>;
export type ModelsByManufacturerQueryError = ErrorType<unknown>;

/**
 * @summary Stats Models by Manufacturer
 */

export function useModelsByManufacturer<
  TData = Awaited<ReturnType<typeof modelsByManufacturer>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof modelsByManufacturer>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useModelsByManufacturerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats Models by Production-Status
 */
export const modelsByProductionStatus = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/stats/models-by-production-status`,
    method: "GET",
    signal,
  });
};

const getModelsByProductionStatusQueryKey = () => {
  return ["stats", "models-by-production-status"] as const;
};

export const useModelsByProductionStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof modelsByProductionStatus>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof modelsByProductionStatus>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getModelsByProductionStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof modelsByProductionStatus>>
  > = ({ signal }) => modelsByProductionStatus(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof modelsByProductionStatus>>,
    TError,
    TData
  >;
};

export type ModelsByProductionStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof modelsByProductionStatus>>
>;
export type ModelsByProductionStatusQueryError = ErrorType<unknown>;

/**
 * @summary Stats Models by Production-Status
 */

export function useModelsByProductionStatus<
  TData = Awaited<ReturnType<typeof modelsByProductionStatus>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof modelsByProductionStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useModelsByProductionStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats Models by Size
 */
export const modelsBySize = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/stats/models-by-size`,
    method: "GET",
    signal,
  });
};

const getModelsBySizeQueryKey = () => {
  return ["stats", "models-by-size"] as const;
};

export const useModelsBySizeQueryOptions = <
  TData = Awaited<ReturnType<typeof modelsBySize>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof modelsBySize>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getModelsBySizeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof modelsBySize>>> = ({
    signal,
  }) => modelsBySize(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof modelsBySize>>,
    TError,
    TData
  >;
};

export type ModelsBySizeQueryResult = NonNullable<
  Awaited<ReturnType<typeof modelsBySize>>
>;
export type ModelsBySizeQueryError = ErrorType<unknown>;

/**
 * @summary Stats Models by Size
 */

export function useModelsBySize<
  TData = Awaited<ReturnType<typeof modelsBySize>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof modelsBySize>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useModelsBySizeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats Models per Month
 */
export const modelsPerMonth = (signal?: AbortSignal) => {
  return axiosClient<BarChartStats[]>({
    url: `/stats/models-per-month`,
    method: "GET",
    signal,
  });
};

const getModelsPerMonthQueryKey = () => {
  return ["stats", "models-per-month"] as const;
};

export const useModelsPerMonthQueryOptions = <
  TData = Awaited<ReturnType<typeof modelsPerMonth>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof modelsPerMonth>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getModelsPerMonthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof modelsPerMonth>>> = ({
    signal,
  }) => modelsPerMonth(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof modelsPerMonth>>,
    TError,
    TData
  >;
};

export type ModelsPerMonthQueryResult = NonNullable<
  Awaited<ReturnType<typeof modelsPerMonth>>
>;
export type ModelsPerMonthQueryError = ErrorType<unknown>;

/**
 * @summary Stats Models per Month
 */

export function useModelsPerMonth<
  TData = Awaited<ReturnType<typeof modelsPerMonth>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof modelsPerMonth>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useModelsPerMonthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Stats
 */
export const stats = (signal?: AbortSignal) => {
  return axiosClient<Stats>({
    url: `/stats/quick-stats`,
    method: "GET",
    signal,
  });
};

const getStatsQueryKey = () => {
  return ["stats", "quick-stats"] as const;
};

export const useStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof stats>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof stats>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getStatsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof stats>>> = ({
    signal,
  }) => stats(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof stats>>,
    TError,
    TData
  >;
};

export type StatsQueryResult = NonNullable<Awaited<ReturnType<typeof stats>>>;
export type StatsQueryError = ErrorType<unknown>;

/**
 * @summary Stats
 */

export function useStats<
  TData = Awaited<ReturnType<typeof stats>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof stats>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useStatsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
