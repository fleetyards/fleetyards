/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net Command API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  ItemPrice,
  ItemPriceInput,
  ItemPrices,
  ItemPricesParams,
  StandardError,
  ValidationError,
} from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary Create new Item Price
 */
export const createItemPrice = (
  itemPriceInput: MaybeRef<ItemPriceInput>,
  signal?: AbortSignal,
) => {
  itemPriceInput = unref(itemPriceInput);

  return axiosClient<ItemPrice>({
    url: `/item-prices`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: itemPriceInput,
    signal,
  });
};

export const getCreateItemPriceMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createItemPrice>>,
    TError,
    { data: ItemPriceInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createItemPrice>>,
  TError,
  { data: ItemPriceInput },
  TContext
> => {
  const mutationKey = ["createItemPrice"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createItemPrice>>,
    { data: ItemPriceInput }
  > = (props) => {
    const { data } = props ?? {};

    return createItemPrice(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateItemPriceMutationResult = NonNullable<
  Awaited<ReturnType<typeof createItemPrice>>
>;
export type CreateItemPriceMutationBody = ItemPriceInput;
export type CreateItemPriceMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Create new Item Price
 */
export const useCreateItemPrice = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createItemPrice>>,
    TError,
    { data: ItemPriceInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createItemPrice>>,
  TError,
  { data: ItemPriceInput },
  TContext
> => {
  const mutationOptions = getCreateItemPriceMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Item Prices list
 */
export const itemPrices = (
  params?: MaybeRef<ItemPricesParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<ItemPrices>({
    url: `/item-prices`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getItemPricesQueryKey = (params?: MaybeRef<ItemPricesParams>) => {
  return ["item-prices", ...(params ? [params] : [])] as const;
};

export const useItemPricesQueryOptions = <
  TData = Awaited<ReturnType<typeof itemPrices>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<ItemPricesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof itemPrices>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getItemPricesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof itemPrices>>> = ({
    signal,
  }) => itemPrices(params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof itemPrices>>,
    TError,
    TData
  >;
};

export type ItemPricesQueryResult = NonNullable<
  Awaited<ReturnType<typeof itemPrices>>
>;
export type ItemPricesQueryError = ErrorType<StandardError>;

/**
 * @summary Item Prices list
 */

export function useItemPrices<
  TData = Awaited<ReturnType<typeof itemPrices>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<ItemPricesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof itemPrices>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useItemPricesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Item price destroy
 */
export const destroyItemPrice = (id: MaybeRef<string>) => {
  id = unref(id);

  return axiosClient<void>({ url: `/item-prices/${id}`, method: "DELETE" });
};

export const getDestroyItemPriceMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyItemPrice>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyItemPrice>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["destroyItemPrice"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyItemPrice>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return destroyItemPrice(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyItemPriceMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyItemPrice>>
>;

export type DestroyItemPriceMutationError = ErrorType<void>;

/**
 * @summary Item price destroy
 */
export const useDestroyItemPrice = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyItemPrice>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyItemPrice>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDestroyItemPriceMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Item Price
 */
export const itemPrice = (id: MaybeRef<string>, signal?: AbortSignal) => {
  id = unref(id);

  return axiosClient<ItemPrice>({
    url: `/item-prices/${id}`,
    method: "GET",
    signal,
  });
};

export const getItemPriceQueryKey = (id: MaybeRef<string>) => {
  return ["item-prices", id] as const;
};

export const useItemPriceQueryOptions = <
  TData = Awaited<ReturnType<typeof itemPrice>>,
  TError = ErrorType<StandardError>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof itemPrice>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getItemPriceQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof itemPrice>>> = ({
    signal,
  }) => itemPrice(id, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof itemPrice>>,
    TError,
    TData
  >;
};

export type ItemPriceQueryResult = NonNullable<
  Awaited<ReturnType<typeof itemPrice>>
>;
export type ItemPriceQueryError = ErrorType<StandardError>;

/**
 * @summary Get Item Price
 */

export function useItemPrice<
  TData = Awaited<ReturnType<typeof itemPrice>>,
  TError = ErrorType<StandardError>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof itemPrice>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useItemPriceQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Update Item Price
 */
export const updateItemPrice = (
  id: MaybeRef<string>,
  itemPriceInput: MaybeRef<ItemPriceInput>,
) => {
  id = unref(id);
  itemPriceInput = unref(itemPriceInput);

  return axiosClient<ItemPrice>({
    url: `/item-prices/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: itemPriceInput,
  });
};

export const getUpdateItemPriceMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateItemPrice>>,
    TError,
    { id: string; data: ItemPriceInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateItemPrice>>,
  TError,
  { id: string; data: ItemPriceInput },
  TContext
> => {
  const mutationKey = ["updateItemPrice"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateItemPrice>>,
    { id: string; data: ItemPriceInput }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateItemPrice(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateItemPriceMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateItemPrice>>
>;
export type UpdateItemPriceMutationBody = ItemPriceInput;
export type UpdateItemPriceMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Update Item Price
 */
export const useUpdateItemPrice = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateItemPrice>>,
    TError,
    { id: string; data: ItemPriceInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateItemPrice>>,
  TError,
  { id: string; data: ItemPriceInput },
  TContext
> => {
  const mutationOptions = getUpdateItemPriceMutationOptions(options);

  return useMutation(mutationOptions);
};
