/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  GetWishlistParams,
  Hangar,
  StandardError,
  VehicleExport,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Clear your Wishlist
 */
export const destroyWishlist = () => {
  return axiosClient<void>({ url: `/wishlist`, method: "DELETE" });
};

export const getDestroyWishlistMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyWishlist>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyWishlist>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["destroyWishlist"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyWishlist>>,
    void
  > = () => {
    return destroyWishlist();
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyWishlistMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyWishlist>>
>;

export type DestroyWishlistMutationError = ErrorType<StandardError>;

/**
 * @summary Clear your Wishlist
 */
export const useDestroyWishlist = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyWishlist>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyWishlist>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDestroyWishlistMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Your Wishlist
 */
export const getWishlist = (
  params?: MaybeRef<GetWishlistParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Hangar>({
    url: `/wishlist`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getGetWishlistQueryKey = (
  params?: MaybeRef<GetWishlistParams>,
) => {
  return ["wishlist", ...(params ? [params] : [])] as const;
};

export const getGetWishlistQueryOptions = <
  TData = Awaited<ReturnType<typeof getWishlist>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<GetWishlistParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWishlist>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetWishlistQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWishlist>>> = ({
    signal,
  }) => getWishlist(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWishlist>>,
    TError,
    TData
  >;
};

export type GetWishlistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWishlist>>
>;
export type GetWishlistQueryError = ErrorType<StandardError>;

/**
 * @summary Your Wishlist
 */

export function useGetWishlist<
  TData = Awaited<ReturnType<typeof getWishlist>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<GetWishlistParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWishlist>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetWishlistQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Export your Wishlist
 */
export const exportWishlist = (signal?: AbortSignal) => {
  return axiosClient<VehicleExport[]>({
    url: `/wishlist/export`,
    method: "GET",
    signal,
  });
};

export const getExportWishlistQueryKey = () => {
  return ["wishlist", "export"] as const;
};

export const getExportWishlistQueryOptions = <
  TData = Awaited<ReturnType<typeof exportWishlist>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof exportWishlist>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getExportWishlistQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof exportWishlist>>> = ({
    signal,
  }) => exportWishlist(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof exportWishlist>>,
    TError,
    TData
  >;
};

export type ExportWishlistQueryResult = NonNullable<
  Awaited<ReturnType<typeof exportWishlist>>
>;
export type ExportWishlistQueryError = ErrorType<StandardError>;

/**
 * @summary Export your Wishlist
 */

export function useExportWishlist<
  TData = Awaited<ReturnType<typeof exportWishlist>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof exportWishlist>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getExportWishlistQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Your Wishlist items
 */
export const wishlistItems = (signal?: AbortSignal) => {
  return axiosClient<string[]>({
    url: `/wishlist/items`,
    method: "GET",
    signal,
  });
};

export const getWishlistItemsQueryKey = () => {
  return ["wishlist", "items"] as const;
};

export const getWishlistItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof wishlistItems>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof wishlistItems>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getWishlistItemsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof wishlistItems>>> = ({
    signal,
  }) => wishlistItems(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof wishlistItems>>,
    TError,
    TData
  >;
};

export type WishlistItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof wishlistItems>>
>;
export type WishlistItemsQueryError = ErrorType<StandardError>;

/**
 * @summary Your Wishlist items
 */

export function useWishlistItems<
  TData = Awaited<ReturnType<typeof wishlistItems>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof wishlistItems>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getWishlistItemsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
