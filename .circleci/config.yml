version: 2.1

ciImage: &ciImage
  image: fleetyards/ci:3.0.2
  auth:
    username: $DOCKERHUB_USER
    password: $DOCKERHUB_PASSWORD
  environment:
    RAILS_ENV: test
    BUNDLE_PATH: ~/app/vendor/bundle
    DATABASE_URL: postgresql://root:root@127.0.0.1:5432/fleetyards_test
    DATABASE_HOST: 127.0.0.1
    DATABASE_USER: root
    ELASTICSEARCH_URL: http://localhost:9200
    JOBS: 1
    NODE_OPTIONS: --max-old-space-size=1024

e2eImage: &e2eImage
  image: fleetyards/e2e:3.0.2
  auth:
    username: $DOCKERHUB_USER
    password: $DOCKERHUB_PASSWORD
  environment:
    DATABASE_URL: postgresql://root:root@127.0.0.1:5432/fleetyards
    TEST_SEEDS: 1
    BUNDLE_PATH: ~/app/vendor/bundle
    RAILS_ENV: ci
    ON_SUBDOMAIN: 1
    RAILS_SERVE_STATIC_FILES: 1
    DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
    JOBS: 1
    PORT: 8270
    CYPRESS_BASE_URL: http://localhost:8270

dbImage: &dbImage
  image: circleci/postgres:9.5.16-alpine
  auth:
    username: $DOCKERHUB_USER
    password: $DOCKERHUB_PASSWORD
  environment:
    POSTGRES_USER: root
    POSTGRES_DB: fleetyards_test

redisImage: &redisImage
  image: circleci/redis:5.0.3-alpine
  auth:
    username: $DOCKERHUB_USER
    password: $DOCKERHUB_PASSWORD

esImage: &esImage
  image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
  environment:
    cluster.name: fleetyards-test-cluster
    xpack.security.enabled: 'false'
    transport.host: localhost
    network.host: 127.0.0.1
    http.port: 9200
    discovery.type: single-node
    ES_JAVA_OPTS: -Xms512m -Xmx512m

defaults: &defaults
  working_directory: ~/app
  docker:
    - *ciImage

ruby-defaults: &ruby-defaults
  working_directory: ~/app
  docker:
    - *ciImage
    - *dbImage

seeds: &seeds
  working_directory: ~/app
  docker:
    - *ciImage
    - *dbImage
    - *esImage

e2e: &e2e
  working_directory: ~/app
  docker:
    - *e2eImage
    - image: circleci/postgres:9.5.16-alpine
      environment:
        POSTGRES_USER: root
        POSTGRES_PASSWORD: root
        POSTGRES_DB: fleetyards
    - *redisImage
    - *esImage

smokeTest: &smokeTest
  working_directory: ~/app
  docker:
    - *e2eImage

jobs:
  health-check:
    docker:
      - image: fleetyards/health:latest
    steps:
      - run: curl --write-out '%{http_code}' --silent --fail --output /dev/null https://fleetyards.net

  bundle:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-bundle-{{ checksum "Gemfile.lock" }}
            - v3-bundle-
      - run: bundle install
      - save_cache:
          key: v3-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - persist_to_workspace:
          root: /root
          paths:
            - app/vendor/bundle

  yarn:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-yarn-{{ checksum "Gemfile.lock" }}
            - v4-yarn-
      - run: yarn install
      - save_cache:
          key: v4-yarn-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/app/node_modules
            - /root/.cache/Cypress
      - persist_to_workspace:
          root: /root
          paths:
            - app/node_modules
            - .cache/Cypress

  bundle-audit:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: bundle install
      - run:
          name: Update Audit DB
          command: bundle exec bundle-audit update
      - run:
          name: Check Audit DB
          command: bundle exec bundle-audit check

  yarn-audit:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: yarn install
      - run:
          name: Check Audit DB
          command: yarn audit --groups dependencies

  rubocop:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: bundle install
      - run:
          name: rubocoptering
          command: bundle exec rubocop --format progress

  js-lint:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: yarn install
      - run: yarn run lint:js

  style-lint:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: yarn install
      - run: yarn run lint:style

  ruby-tests:
    <<: *ruby-defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: bundle install
      - run: mkdir -p ~/app/log
      - run: bundle exec rails db:create db:schema:load
      - run:
          name: Run Unit Tests
          command: bundle exec rails test:coverage
      - store_test_results:
          path: ~/app/test/reports

  js-tests:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: yarn install
      - run:
          name: Run Javascript Tests
          command: yarn test:ci

  seeds:
    <<: *seeds
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: bundle install
      - run: mkdir -p ~/app/log
      - run: bundle exec rails db:create db:schema:load
      - run:
          name: Create ES Index
          command: bundle exec thor search:index
      - run:
          name: Run Seeds
          command: bundle exec rails db:seed

  assets:
    <<: *ruby-defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: bundle install
      - run: yarn install
      - run:
          name: Webpacker & Assets Compile
          command: NODE_ENV=production RAILS_ENV=ci bundle exec rails assets:precompile
      - persist_to_workspace:
          root: /root
          paths:
            - app/public/assets
            - app/public/packs
            - app/tmp/cache/webpacker

  e2e-test:
    <<: *e2e
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: bundle install
      - run: yarn install
      - run: mkdir -p ~/app/log && mkdir -p tmp/pids && rm -f tmp/pids/*
      - run:
          name: Setup DB
          command: bundle exec rails db:create db:schema:load
      - run:
          name: Create ES Index
          command: bundle exec thor search:index
      - run:
          name: Prefill DB
          command: bundle exec rails db:seed
      - run:
          name: Run Server
          command: bundle exec puma -C config/puma.rb
          background: true
      - run:
          name: Wait for Server
          command: |
              until $(curl --output /dev/null --silent --head --fail $CYPRESS_BASE_URL); do
                  printf '.'
                  sleep 5
              done
      - run: yarn install
      - run:
          name: Run E2E Tests
          command: yarn run test:e2e --record --parallel
      - store_artifacts:
          path: ~/app/cypress/snapshots
          destination: e2e-snapshots
      - store_artifacts:
          path: ~/app/cypress/screenshots
          destination: e2e-screenshots

  smoke-test:
    <<: *smokeTest
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: yarn install
      - run:
          name: Run E2E Tests
          command: yarn run test:e2e --record --config baseUrl=https://stage.fleetyards.net --parallel
      - store_artifacts:
          path: ~/app/cypress/snapshots
          destination: e2e-snapshots
      - store_artifacts:
          path: ~/app/cypress/screenshots
          destination: e2e-screenshots

  # deploy-to-stage:
  #   <<: *defaults
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: /root
  #     - run: bundle install
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "b9:00:09:c3:96:48:ed:1e:90:c1:03:bc:3c:7d:14:59"
  #     - run:
  #         name: Keyscan Stage Server (HACK)
  #         command: ssh-keyscan -H fleetyards-stage.mortik.xyz >> ~/.ssh/known_hosts
  #     - run:
  #         name: Keyscan Github (HACK)
  #         command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  #     - run:
  #         name: Deploy
  #         command: bundle exec cap stage deploy
  #     - run: |
  #         curl -X POST $APP_SIGNAL_STAGE_DEPLOY_HOOK \
  #         -H 'Content-Type: application/json' \
  #         -d "{\"revision\": \"$CIRCLE_SHA1\", \"user\": \"$CIRCLE_USERNAME\"}"
  #     - run: |
  #         curl -X POST $DISCORD_WEBHOOK_STAGE \
  #         -H 'Content-Type: application/json' \
  #         -d "{\"content\": \"**New Stage Release:**\" }"

  # create-release:
  #   <<: *defaults
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: /root
  #     - run: bundle install
  #     - run: yarn install
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "b9:00:09:c3:96:48:ed:1e:90:c1:03:bc:3c:7d:14:59"
  #     - run:
  #         name: Keyscan Live Server (HACK)
  #         command: ssh-keyscan -H fleetyards.mortik.xyz >> ~/.ssh/known_hosts
  #     - run:
  #         name: Keyscan Github (HACK)
  #         command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  #     - run:
  #         name: Setup Git
  #         command: git config --global user.email $GIT_EMAIL && git config --global user.name $GIT_USER
  #     - run:
  #         name: Create Release
  #         command: bundle exec thor release:new --push

  deploy-to-live:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run: bundle install
      - add_ssh_keys:
          fingerprints:
            - "b9:00:09:c3:96:48:ed:1e:90:c1:03:bc:3c:7d:14:59"
      - run:
          name: Keyscan Live Server (HACK)
          command: ssh-keyscan -H fleetyards.mortik.xyz >> ~/.ssh/known_hosts
      - run:
          name: Keyscan Github (HACK)
          command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run:
          name: Deploy
          command: bundle exec cap live deploy
      - run: |
          curl -X POST $APP_SIGNAL_LIVE_DEPLOY_HOOK \
          -H 'Content-Type: application/json' \
          -d "{\"revision\": \"$CIRCLE_SHA1\", \"user\": \"$CIRCLE_USERNAME\"}"
      - run: |
          curl -X POST $DISCORD_WEBHOOK \
          -H 'Content-Type: application/json' \
          -d "{\"content\": \"**New Release:** $CIRCLE_TAG\nhttps://github.com/fleetyards/fleetyards/releases/tag/$CIRCLE_TAG\" }"

workflows:
  version: 2
  check:
    triggers:
      - schedule:
          cron: "0 20 * * *"
          filters:
            branches:
              only: main
    jobs:
      - bundle
      - yarn
      - bundle-audit:
          requires:
            - bundle
      - yarn-audit:
          requires:
            - yarn

  health:
    triggers:
      - schedule:
          cron: "0 18 * * *"
          filters:
            branches:
              only: main
    jobs:
      - health-check

  release:
    jobs:
      - bundle:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - yarn:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - smoke-test:
          requires:
            - bundle
            - yarn
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-to-live:
          requires:
            - smoke-test
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  main:
    jobs:
      - bundle
      - yarn
      - rubocop:
          requires:
            - bundle
      - js-lint:
          requires:
            - yarn
      - style-lint:
          requires:
            - yarn
      - ruby-tests:
          requires:
            - bundle
      - js-tests:
          requires:
            - yarn
      - seeds:
          requires:
            - bundle
      - assets:
          requires:
            - bundle
            - yarn
      - e2e-test:
          requires:
            - assets
      # - deploy-to-stage:
      #     requires:
      #       - seeds
      #       - e2e-test
      #       - rubocop
      #       - ruby-tests
      #       - js-tests
      #       - js-lint
      #       - style-lint
      #     filters:
      #       branches:
      #         only: main
      # - request-release:
      #     type: approval
      #     requires:
      #       - deploy-to-stage
      # - create-release:
      #     requires:
      #       - request-release
