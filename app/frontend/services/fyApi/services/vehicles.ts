/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  Check,
  CheckInput,
  FilterOption,
  StandardError,
  Vehicle,
  VehicleBulkDestroyInput,
  VehicleBulkUpdateInput,
  VehicleCreateInput,
  VehicleUpdateInput,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Update multiple vehicles
 */
export const vehicleUpdateBulk = (
  vehicleBulkUpdateInput: MaybeRef<VehicleBulkUpdateInput>,
) => {
  vehicleBulkUpdateInput = unref(vehicleBulkUpdateInput);

  return axiosClient<void>({
    url: `/vehicles/bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: vehicleBulkUpdateInput,
  });
};

export const getVehicleUpdateBulkMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleUpdateBulk>>,
    TError,
    { data: VehicleBulkUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof vehicleUpdateBulk>>,
  TError,
  { data: VehicleBulkUpdateInput },
  TContext
> => {
  const mutationKey = ["vehicleUpdateBulk"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof vehicleUpdateBulk>>,
    { data: VehicleBulkUpdateInput }
  > = (props) => {
    const { data } = props ?? {};

    return vehicleUpdateBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type VehicleUpdateBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof vehicleUpdateBulk>>
>;
export type VehicleUpdateBulkMutationBody = VehicleBulkUpdateInput;
export type VehicleUpdateBulkMutationError = ErrorType<StandardError>;

/**
 * @summary Update multiple vehicles
 */
export const useVehicleUpdateBulk = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleUpdateBulk>>,
    TError,
    { data: VehicleBulkUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof vehicleUpdateBulk>>,
  TError,
  { data: VehicleBulkUpdateInput },
  TContext
> => {
  const mutationOptions = getVehicleUpdateBulkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Destroy multiple Vehicles
 */
export const vehicleDestroyBulk = (
  vehicleBulkDestroyInput: MaybeRef<VehicleBulkDestroyInput>,
) => {
  vehicleBulkDestroyInput = unref(vehicleBulkDestroyInput);

  return axiosClient<void>({
    url: `/vehicles/destroy-bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: vehicleBulkDestroyInput,
  });
};

export const getVehicleDestroyBulkMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleDestroyBulk>>,
    TError,
    { data: VehicleBulkDestroyInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof vehicleDestroyBulk>>,
  TError,
  { data: VehicleBulkDestroyInput },
  TContext
> => {
  const mutationKey = ["vehicleDestroyBulk"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof vehicleDestroyBulk>>,
    { data: VehicleBulkDestroyInput }
  > = (props) => {
    const { data } = props ?? {};

    return vehicleDestroyBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type VehicleDestroyBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof vehicleDestroyBulk>>
>;
export type VehicleDestroyBulkMutationBody = VehicleBulkDestroyInput;
export type VehicleDestroyBulkMutationError = ErrorType<StandardError>;

/**
 * @summary Destroy multiple Vehicles
 */
export const useVehicleDestroyBulk = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleDestroyBulk>>,
    TError,
    { data: VehicleBulkDestroyInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof vehicleDestroyBulk>>,
  TError,
  { data: VehicleBulkDestroyInput },
  TContext
> => {
  const mutationOptions = getVehicleDestroyBulkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Check Vehicle Serial
 */
export const vehicleCheckSerial = (
  checkInput: MaybeRef<CheckInput>,
  signal?: AbortSignal,
) => {
  checkInput = unref(checkInput);

  return axiosClient<Check>({
    url: `/vehicles/check-serial`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: checkInput,
    signal,
  });
};

export const getVehicleCheckSerialMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleCheckSerial>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof vehicleCheckSerial>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationKey = ["vehicleCheckSerial"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof vehicleCheckSerial>>,
    { data: CheckInput }
  > = (props) => {
    const { data } = props ?? {};

    return vehicleCheckSerial(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type VehicleCheckSerialMutationResult = NonNullable<
  Awaited<ReturnType<typeof vehicleCheckSerial>>
>;
export type VehicleCheckSerialMutationBody = CheckInput;
export type VehicleCheckSerialMutationError = ErrorType<StandardError>;

/**
 * @summary Check Vehicle Serial
 */
export const useVehicleCheckSerial = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleCheckSerial>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof vehicleCheckSerial>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationOptions = getVehicleCheckSerialMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Create new Vehicle
 */
export const vehicleCreate = (
  vehicleCreateInput: MaybeRef<VehicleCreateInput>,
  signal?: AbortSignal,
) => {
  vehicleCreateInput = unref(vehicleCreateInput);

  return axiosClient<Vehicle>({
    url: `/vehicles`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: vehicleCreateInput,
    signal,
  });
};

export const getVehicleCreateMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleCreate>>,
    TError,
    { data: VehicleCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof vehicleCreate>>,
  TError,
  { data: VehicleCreateInput },
  TContext
> => {
  const mutationKey = ["vehicleCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof vehicleCreate>>,
    { data: VehicleCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return vehicleCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type VehicleCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof vehicleCreate>>
>;
export type VehicleCreateMutationBody = VehicleCreateInput;
export type VehicleCreateMutationError = ErrorType<StandardError>;

/**
 * @summary Create new Vehicle
 */
export const useVehicleCreate = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleCreate>>,
    TError,
    { data: VehicleCreateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof vehicleCreate>>,
  TError,
  { data: VehicleCreateInput },
  TContext
> => {
  const mutationOptions = getVehicleCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete all ingame bought Vehicles
 */
export const destroyAllIngame = () => {
  return axiosClient<void>({
    url: `/vehicles/destroy-all-ingame`,
    method: "DELETE",
  });
};

export const getDestroyAllIngameMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyAllIngame>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyAllIngame>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["destroyAllIngame"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyAllIngame>>,
    void
  > = () => {
    return destroyAllIngame();
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyAllIngameMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyAllIngame>>
>;

export type DestroyAllIngameMutationError = ErrorType<StandardError>;

/**
 * @summary Delete all ingame bought Vehicles
 */
export const useDestroyAllIngame = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyAllIngame>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyAllIngame>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDestroyAllIngameMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Vehicle
 */
export const vehicleDestroy = (id: MaybeRef<string>) => {
  id = unref(id);

  return axiosClient<Vehicle>({ url: `/vehicles/${id}`, method: "DELETE" });
};

export const getVehicleDestroyMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleDestroy>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof vehicleDestroy>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["vehicleDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof vehicleDestroy>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return vehicleDestroy(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type VehicleDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof vehicleDestroy>>
>;

export type VehicleDestroyMutationError = ErrorType<StandardError>;

/**
 * @summary Delete Vehicle
 */
export const useVehicleDestroy = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleDestroy>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof vehicleDestroy>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getVehicleDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update Vehicle
 */
export const vehicleUpdate = (
  id: MaybeRef<string>,
  vehicleUpdateInput: MaybeRef<VehicleUpdateInput>,
) => {
  id = unref(id);
  vehicleUpdateInput = unref(vehicleUpdateInput);

  return axiosClient<Vehicle>({
    url: `/vehicles/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: vehicleUpdateInput,
  });
};

export const getVehicleUpdateMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleUpdate>>,
    TError,
    { id: string; data: VehicleUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof vehicleUpdate>>,
  TError,
  { id: string; data: VehicleUpdateInput },
  TContext
> => {
  const mutationKey = ["vehicleUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof vehicleUpdate>>,
    { id: string; data: VehicleUpdateInput }
  > = (props) => {
    const { id, data } = props ?? {};

    return vehicleUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type VehicleUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof vehicleUpdate>>
>;
export type VehicleUpdateMutationBody = VehicleUpdateInput;
export type VehicleUpdateMutationError = ErrorType<StandardError>;

/**
 * @summary Update Vehicle
 */
export const useVehicleUpdate = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof vehicleUpdate>>,
    TError,
    { id: string; data: VehicleUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof vehicleUpdate>>,
  TError,
  { id: string; data: VehicleUpdateInput },
  TContext
> => {
  const mutationOptions = getVehicleUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Bought Via Filters
 */
export const boughtViaFilters = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/vehicles/filters/bought-via`,
    method: "GET",
    signal,
  });
};

export const getBoughtViaFiltersQueryKey = () => {
  return ["vehicles", "filters", "bought-via"] as const;
};

export const getBoughtViaFiltersQueryOptions = <
  TData = Awaited<ReturnType<typeof boughtViaFilters>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof boughtViaFilters>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getBoughtViaFiltersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof boughtViaFilters>>
  > = ({ signal }) => boughtViaFilters(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof boughtViaFilters>>,
    TError,
    TData
  >;
};

export type BoughtViaFiltersQueryResult = NonNullable<
  Awaited<ReturnType<typeof boughtViaFilters>>
>;
export type BoughtViaFiltersQueryError = ErrorType<unknown>;

/**
 * @summary Bought Via Filters
 */

export function useBoughtViaFilters<
  TData = Awaited<ReturnType<typeof boughtViaFilters>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof boughtViaFilters>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getBoughtViaFiltersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
