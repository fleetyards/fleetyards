/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type { RoadmapItem, RoadmapItemsParams, RoadmapWeek } from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Roadmap Items
 */
export const roadmapItems = (
  params?: MaybeRef<RoadmapItemsParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<RoadmapItem[]>({
    url: `/roadmap`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getRoadmapItemsQueryKey = (
  params?: MaybeRef<RoadmapItemsParams>,
) => {
  return ["roadmap", ...(params ? [params] : [])] as const;
};

export const getRoadmapItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof roadmapItems>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<RoadmapItemsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roadmapItems>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getRoadmapItemsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof roadmapItems>>> = ({
    signal,
  }) => roadmapItems(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof roadmapItems>>,
    TError,
    TData
  >;
};

export type RoadmapItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof roadmapItems>>
>;
export type RoadmapItemsQueryError = ErrorType<unknown>;

/**
 * @summary Roadmap Items
 */

export function useRoadmapItems<
  TData = Awaited<ReturnType<typeof roadmapItems>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<RoadmapItemsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof roadmapItems>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getRoadmapItemsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Roadmap Weeks
 */
export const roadmapWeeks = (signal?: AbortSignal) => {
  return axiosClient<RoadmapWeek[]>({
    url: `/roadmap/weeks`,
    method: "GET",
    signal,
  });
};

export const getRoadmapWeeksQueryKey = () => {
  return ["roadmap", "weeks"] as const;
};

export const getRoadmapWeeksQueryOptions = <
  TData = Awaited<ReturnType<typeof roadmapWeeks>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof roadmapWeeks>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getRoadmapWeeksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof roadmapWeeks>>> = ({
    signal,
  }) => roadmapWeeks(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof roadmapWeeks>>,
    TError,
    TData
  >;
};

export type RoadmapWeeksQueryResult = NonNullable<
  Awaited<ReturnType<typeof roadmapWeeks>>
>;
export type RoadmapWeeksQueryError = ErrorType<unknown>;

/**
 * @summary Roadmap Weeks
 */

export function useRoadmapWeeks<
  TData = Awaited<ReturnType<typeof roadmapWeeks>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof roadmapWeeks>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getRoadmapWeeksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
