/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  FilterOption
} from '../models';

import { axiosClient } from '../../axiosClient';
import type { ErrorType } from '../../axiosClient';
import { customQueryOptions } from '../../customQueryOptions';





/**
 * @summary Vehicles Bought Via Filters
 */
export const vehicleBoughtViaFilters = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClient<FilterOption[]>(
      {url: `/filters/vehicles/bought-via`, method: 'GET', signal
    },
      );
    }
  

const getVehicleBoughtViaFiltersQueryKey = () => {
    return ['filters','vehicles','bought-via'] as const;
    }

    
export const useVehicleBoughtViaFiltersQueryOptions = <TData = Awaited<ReturnType<typeof vehicleBoughtViaFilters>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehicleBoughtViaFilters>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getVehicleBoughtViaFiltersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof vehicleBoughtViaFilters>>> = ({ signal }) => vehicleBoughtViaFilters(signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof vehicleBoughtViaFilters>>, TError, TData> 
}

export type VehicleBoughtViaFiltersQueryResult = NonNullable<Awaited<ReturnType<typeof vehicleBoughtViaFilters>>>
export type VehicleBoughtViaFiltersQueryError = ErrorType<unknown>


/**
 * @summary Vehicles Bought Via Filters
 */

export function useVehicleBoughtViaFilters<TData = Awaited<ReturnType<typeof vehicleBoughtViaFilters>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehicleBoughtViaFilters>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useVehicleBoughtViaFiltersQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}





export const getVehicleBoughtViaFiltersResponseMock = (): FilterOption[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), icon: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), label: faker.string.alpha(20), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]),faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]),]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))


export const getVehicleBoughtViaFiltersMockHandler = (overrideResponse?: FilterOption[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FilterOption[]> | FilterOption[])) => {
  return http.get('*/filters/vehicles/bought-via', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVehicleBoughtViaFiltersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getVehicleFiltersMock = () => [
  getVehicleBoughtViaFiltersMockHandler()
]
