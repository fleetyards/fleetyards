/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  HangarStats,
  HangarStatsParams,
  PieChartStats,
  StandardError,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Hangar Stats - Models by Classification
 */
export const hangarModelsByClassification = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/hangar/stats/models-by-classification`,
    method: "GET",
    signal,
  });
};

export const getHangarModelsByClassificationQueryKey = () => {
  return ["hangar", "stats", "models-by-classification"] as const;
};

export const getHangarModelsByClassificationQueryOptions = <
  TData = Awaited<ReturnType<typeof hangarModelsByClassification>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof hangarModelsByClassification>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarModelsByClassificationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof hangarModelsByClassification>>
  > = ({ signal }) => hangarModelsByClassification(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangarModelsByClassification>>,
    TError,
    TData
  >;
};

export type HangarModelsByClassificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof hangarModelsByClassification>>
>;
export type HangarModelsByClassificationQueryError = ErrorType<StandardError>;

/**
 * @summary Hangar Stats - Models by Classification
 */

export function useHangarModelsByClassification<
  TData = Awaited<ReturnType<typeof hangarModelsByClassification>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof hangarModelsByClassification>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarModelsByClassificationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Hangar Stats - Models by Manufacturer
 */
export const hangarModelsByManufacturer = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/hangar/stats/models-by-manufacturer`,
    method: "GET",
    signal,
  });
};

export const getHangarModelsByManufacturerQueryKey = () => {
  return ["hangar", "stats", "models-by-manufacturer"] as const;
};

export const getHangarModelsByManufacturerQueryOptions = <
  TData = Awaited<ReturnType<typeof hangarModelsByManufacturer>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof hangarModelsByManufacturer>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarModelsByManufacturerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof hangarModelsByManufacturer>>
  > = ({ signal }) => hangarModelsByManufacturer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangarModelsByManufacturer>>,
    TError,
    TData
  >;
};

export type HangarModelsByManufacturerQueryResult = NonNullable<
  Awaited<ReturnType<typeof hangarModelsByManufacturer>>
>;
export type HangarModelsByManufacturerQueryError = ErrorType<StandardError>;

/**
 * @summary Hangar Stats - Models by Manufacturer
 */

export function useHangarModelsByManufacturer<
  TData = Awaited<ReturnType<typeof hangarModelsByManufacturer>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof hangarModelsByManufacturer>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarModelsByManufacturerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Hangar Stats - Models by Production Status
 */
export const hangarModelsByProductionStatus = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/hangar/stats/models-by-production-status`,
    method: "GET",
    signal,
  });
};

export const getHangarModelsByProductionStatusQueryKey = () => {
  return ["hangar", "stats", "models-by-production-status"] as const;
};

export const getHangarModelsByProductionStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof hangarModelsByProductionStatus>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof hangarModelsByProductionStatus>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarModelsByProductionStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof hangarModelsByProductionStatus>>
  > = ({ signal }) => hangarModelsByProductionStatus(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangarModelsByProductionStatus>>,
    TError,
    TData
  >;
};

export type HangarModelsByProductionStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof hangarModelsByProductionStatus>>
>;
export type HangarModelsByProductionStatusQueryError = ErrorType<StandardError>;

/**
 * @summary Hangar Stats - Models by Production Status
 */

export function useHangarModelsByProductionStatus<
  TData = Awaited<ReturnType<typeof hangarModelsByProductionStatus>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof hangarModelsByProductionStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarModelsByProductionStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Hangar Stats - Models by Size
 */
export const hangarModelsBySize = (signal?: AbortSignal) => {
  return axiosClient<PieChartStats[]>({
    url: `/hangar/stats/models-by-size`,
    method: "GET",
    signal,
  });
};

export const getHangarModelsBySizeQueryKey = () => {
  return ["hangar", "stats", "models-by-size"] as const;
};

export const getHangarModelsBySizeQueryOptions = <
  TData = Awaited<ReturnType<typeof hangarModelsBySize>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof hangarModelsBySize>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarModelsBySizeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof hangarModelsBySize>>
  > = ({ signal }) => hangarModelsBySize(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangarModelsBySize>>,
    TError,
    TData
  >;
};

export type HangarModelsBySizeQueryResult = NonNullable<
  Awaited<ReturnType<typeof hangarModelsBySize>>
>;
export type HangarModelsBySizeQueryError = ErrorType<StandardError>;

/**
 * @summary Hangar Stats - Models by Size
 */

export function useHangarModelsBySize<
  TData = Awaited<ReturnType<typeof hangarModelsBySize>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof hangarModelsBySize>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarModelsBySizeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Your Hangar Stats
 */
export const hangarStats = (
  params?: MaybeRef<HangarStatsParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<HangarStats>({
    url: `/hangar/stats`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getHangarStatsQueryKey = (
  params?: MaybeRef<HangarStatsParams>,
) => {
  return ["hangar", "stats", ...(params ? [params] : [])] as const;
};

export const getHangarStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof hangarStats>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<HangarStatsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof hangarStats>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarStatsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof hangarStats>>> = ({
    signal,
  }) => hangarStats(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangarStats>>,
    TError,
    TData
  >;
};

export type HangarStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof hangarStats>>
>;
export type HangarStatsQueryError = ErrorType<StandardError>;

/**
 * @summary Your Hangar Stats
 */

export function useHangarStats<
  TData = Awaited<ReturnType<typeof hangarStats>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<HangarStatsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof hangarStats>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarStatsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
