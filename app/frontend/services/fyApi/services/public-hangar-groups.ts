/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type { HangarGroupPublic } from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary HangarGroup list
 */
export const publicHangarGroups = (
  username: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  username = unref(username);

  return axiosClient<HangarGroupPublic[]>({
    url: `/public/hangars/${username}/groups`,
    method: "GET",
    signal,
  });
};

const getPublicHangarGroupsQueryKey = (username: MaybeRef<string>) => {
  return ["public", "hangars", username, "groups"] as const;
};

export const usePublicHangarGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof publicHangarGroups>>,
  TError = ErrorType<unknown>,
>(
  username: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicHangarGroups>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getPublicHangarGroupsQueryKey(username);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof publicHangarGroups>>
  > = ({ signal }) => publicHangarGroups(username, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof publicHangarGroups>>,
    TError,
    TData
  >;
};

export type PublicHangarGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof publicHangarGroups>>
>;
export type PublicHangarGroupsQueryError = ErrorType<unknown>;

/**
 * @summary HangarGroup list
 */

export function usePublicHangarGroups<
  TData = Awaited<ReturnType<typeof publicHangarGroups>>,
  TError = ErrorType<unknown>,
>(
  username: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicHangarGroups>>,
        TError,
        TData
      >
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = usePublicHangarGroupsQueryOptions(username, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
