/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";

import type { ScDataVersion, Version } from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary SC Data Version
 */
export const scDataVersion = (signal?: AbortSignal) => {
  return axiosClient<ScDataVersion>({
    url: `/sc-data/version`,
    method: "GET",
    signal,
  });
};

const getScDataVersionQueryKey = () => {
  return ["sc-data", "version"] as const;
};

export const useScDataVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof scDataVersion>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof scDataVersion>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getScDataVersionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof scDataVersion>>> = ({
    signal,
  }) => scDataVersion(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof scDataVersion>>,
    TError,
    TData
  >;
};

export type ScDataVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof scDataVersion>>
>;
export type ScDataVersionQueryError = ErrorType<unknown>;

/**
 * @summary SC Data Version
 */

export function useScDataVersion<
  TData = Awaited<ReturnType<typeof scDataVersion>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof scDataVersion>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useScDataVersionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Version of Fleetyards
 */
export const version = (signal?: AbortSignal) => {
  return axiosClient<Version>({ url: `/version`, method: "GET", signal });
};

const getVersionQueryKey = () => {
  return ["version"] as const;
};

export const useVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof version>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof version>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getVersionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof version>>> = ({
    signal,
  }) => version(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof version>>,
    TError,
    TData
  >;
};

export type VersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof version>>
>;
export type VersionQueryError = ErrorType<unknown>;

/**
 * @summary Version of Fleetyards
 */

export function useVersion<
  TData = Awaited<ReturnType<typeof version>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof version>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useVersionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
