/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation } from "@tanstack/vue-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  OtpBackupCodes,
  SetupOtpInput,
  StandardError,
  StandardMessage,
  ValidationError,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Disable OTP Setup
 */
export const disableOtpSetup = (
  setupOtpInput: MaybeRef<SetupOtpInput>,
  signal?: AbortSignal,
) => {
  setupOtpInput = unref(setupOtpInput);

  return axiosClient<StandardMessage>({
    url: `/otp/disable`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: setupOtpInput,
    signal,
  });
};

export const getDisableOtpSetupMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof disableOtpSetup>>,
    TError,
    { data: SetupOtpInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof disableOtpSetup>>,
  TError,
  { data: SetupOtpInput },
  TContext
> => {
  const mutationKey = ["disableOtpSetup"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof disableOtpSetup>>,
    { data: SetupOtpInput }
  > = (props) => {
    const { data } = props ?? {};

    return disableOtpSetup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DisableOtpSetupMutationResult = NonNullable<
  Awaited<ReturnType<typeof disableOtpSetup>>
>;
export type DisableOtpSetupMutationBody = SetupOtpInput;
export type DisableOtpSetupMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Disable OTP Setup
 */
export const useDisableOtpSetup = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof disableOtpSetup>>,
    TError,
    { data: SetupOtpInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof disableOtpSetup>>,
  TError,
  { data: SetupOtpInput },
  TContext
> => {
  const mutationOptions = getDisableOtpSetupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Enable OTP Setup
 */
export const enableOtpSetup = (
  setupOtpInput: MaybeRef<SetupOtpInput>,
  signal?: AbortSignal,
) => {
  setupOtpInput = unref(setupOtpInput);

  return axiosClient<OtpBackupCodes>({
    url: `/otp/enable`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: setupOtpInput,
    signal,
  });
};

export const getEnableOtpSetupMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof enableOtpSetup>>,
    TError,
    { data: SetupOtpInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof enableOtpSetup>>,
  TError,
  { data: SetupOtpInput },
  TContext
> => {
  const mutationKey = ["enableOtpSetup"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof enableOtpSetup>>,
    { data: SetupOtpInput }
  > = (props) => {
    const { data } = props ?? {};

    return enableOtpSetup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type EnableOtpSetupMutationResult = NonNullable<
  Awaited<ReturnType<typeof enableOtpSetup>>
>;
export type EnableOtpSetupMutationBody = SetupOtpInput;
export type EnableOtpSetupMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Enable OTP Setup
 */
export const useEnableOtpSetup = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof enableOtpSetup>>,
    TError,
    { data: SetupOtpInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof enableOtpSetup>>,
  TError,
  { data: SetupOtpInput },
  TContext
> => {
  const mutationOptions = getEnableOtpSetupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Generate OTP Backup Codes
 */
export const generateOtpBackupCodes = (signal?: AbortSignal) => {
  return axiosClient<OtpBackupCodes>({
    url: `/otp/generate-backup-codes`,
    method: "POST",
    signal,
  });
};

export const getGenerateOtpBackupCodesMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateOtpBackupCodes>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generateOtpBackupCodes>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["generateOtpBackupCodes"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generateOtpBackupCodes>>,
    void
  > = () => {
    return generateOtpBackupCodes();
  };

  return { mutationFn, ...mutationOptions };
};

export type GenerateOtpBackupCodesMutationResult = NonNullable<
  Awaited<ReturnType<typeof generateOtpBackupCodes>>
>;

export type GenerateOtpBackupCodesMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Generate OTP Backup Codes
 */
export const useGenerateOtpBackupCodes = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateOtpBackupCodes>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof generateOtpBackupCodes>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getGenerateOtpBackupCodesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Start OTP Setup
 */
export const startOtpSetup = (signal?: AbortSignal) => {
  return axiosClient<StandardMessage>({
    url: `/otp/start`,
    method: "POST",
    signal,
  });
};

export const getStartOtpSetupMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof startOtpSetup>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof startOtpSetup>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["startOtpSetup"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof startOtpSetup>>,
    void
  > = () => {
    return startOtpSetup();
  };

  return { mutationFn, ...mutationOptions };
};

export type StartOtpSetupMutationResult = NonNullable<
  Awaited<ReturnType<typeof startOtpSetup>>
>;

export type StartOtpSetupMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Start OTP Setup
 */
export const useStartOtpSetup = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof startOtpSetup>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof startOtpSetup>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getStartOtpSetupMutationOptions(options);

  return useMutation(mutationOptions);
};
