/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  FleetMember,
  FleetMemberCreateInput,
  FleetMembersParams,
  StandardError,
  StandardMessage,
  ValidationError,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * No Member found
 * @summary Accept Member
 */
export const acceptMember = (
  fleetSlug: MaybeRef<string>,
  username: MaybeRef<string>,
) => {
  fleetSlug = unref(fleetSlug);
  username = unref(username);

  return axiosClient<StandardMessage>({
    url: `/fleets/${fleetSlug}/members/${username}/accept`,
    method: "PUT",
  });
};

export const getAcceptMemberMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationKey = ["acceptMember"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptMember>>,
    { fleetSlug: string; username: string }
  > = (props) => {
    const { fleetSlug, username } = props ?? {};

    return acceptMember(fleetSlug, username);
  };

  return { mutationFn, ...mutationOptions };
};

export type AcceptMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptMember>>
>;

export type AcceptMemberMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Accept Member
 */
export const useAcceptMember = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof acceptMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationOptions = getAcceptMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * You are not the owner of this Fleet
 * @summary Create Member
 */
export const createMember = (
  fleetSlug: MaybeRef<string>,
  fleetMemberCreateInput: MaybeRef<FleetMemberCreateInput>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  fleetMemberCreateInput = unref(fleetMemberCreateInput);

  return axiosClient<FleetMember>({
    url: `/fleets/${fleetSlug}/members`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: fleetMemberCreateInput,
    signal,
  });
};

export const getCreateMemberMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMember>>,
    TError,
    { fleetSlug: string; data: FleetMemberCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMember>>,
  TError,
  { fleetSlug: string; data: FleetMemberCreateInput },
  TContext
> => {
  const mutationKey = ["createMember"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMember>>,
    { fleetSlug: string; data: FleetMemberCreateInput }
  > = (props) => {
    const { fleetSlug, data } = props ?? {};

    return createMember(fleetSlug, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMember>>
>;
export type CreateMemberMutationBody = FleetMemberCreateInput;
export type CreateMemberMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Create Member
 */
export const useCreateMember = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMember>>,
    TError,
    { fleetSlug: string; data: FleetMemberCreateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createMember>>,
  TError,
  { fleetSlug: string; data: FleetMemberCreateInput },
  TContext
> => {
  const mutationOptions = getCreateMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Fleet Member List
 */
export const fleetMembers = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetMembersParams>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  params = unref(params);

  return axiosClient<FleetMember[]>({
    url: `/fleets/${fleetSlug}/members`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getFleetMembersQueryKey = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetMembersParams>,
) => {
  return ["fleets", fleetSlug, "members", ...(params ? [params] : [])] as const;
};

export const getFleetMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof fleetMembers>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetMembersParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fleetMembers>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getFleetMembersQueryKey(fleetSlug, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fleetMembers>>> = ({
    signal,
  }) => fleetMembers(fleetSlug, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(fleetSlug)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof fleetMembers>>, TError, TData>;
};

export type FleetMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof fleetMembers>>
>;
export type FleetMembersQueryError = ErrorType<StandardError>;

/**
 * @summary Fleet Member List
 */

export function useFleetMembers<
  TData = Awaited<ReturnType<typeof fleetMembers>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetMembersParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fleetMembers>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFleetMembersQueryOptions(fleetSlug, params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * No Member found
 * @summary Decline Member
 */
export const declineMember = (
  fleetSlug: MaybeRef<string>,
  username: MaybeRef<string>,
) => {
  fleetSlug = unref(fleetSlug);
  username = unref(username);

  return axiosClient<StandardMessage>({
    url: `/fleets/${fleetSlug}/members/${username}/decline`,
    method: "PUT",
  });
};

export const getDeclineMemberMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof declineMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationKey = ["declineMember"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof declineMember>>,
    { fleetSlug: string; username: string }
  > = (props) => {
    const { fleetSlug, username } = props ?? {};

    return declineMember(fleetSlug, username);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeclineMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof declineMember>>
>;

export type DeclineMemberMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Decline Member
 */
export const useDeclineMember = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof declineMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationOptions = getDeclineMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * No Member found
 * @summary Demote Member
 */
export const demoteMember = (
  fleetSlug: MaybeRef<string>,
  username: MaybeRef<string>,
) => {
  fleetSlug = unref(fleetSlug);
  username = unref(username);

  return axiosClient<FleetMember>({
    url: `/fleets/${fleetSlug}/members/${username}/demote`,
    method: "PUT",
  });
};

export const getDemoteMemberMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof demoteMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof demoteMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationKey = ["demoteMember"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof demoteMember>>,
    { fleetSlug: string; username: string }
  > = (props) => {
    const { fleetSlug, username } = props ?? {};

    return demoteMember(fleetSlug, username);
  };

  return { mutationFn, ...mutationOptions };
};

export type DemoteMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof demoteMember>>
>;

export type DemoteMemberMutationError = ErrorType<StandardError>;

/**
 * @summary Demote Member
 */
export const useDemoteMember = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof demoteMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof demoteMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationOptions = getDemoteMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * You are not the owner of this Fleet
 * @summary Remove Fleet Member
 */
export const removeMember = (
  fleetSlug: MaybeRef<string>,
  username: MaybeRef<string>,
) => {
  fleetSlug = unref(fleetSlug);
  username = unref(username);

  return axiosClient<void>({
    url: `/fleets/${fleetSlug}/members/${username}`,
    method: "DELETE",
  });
};

export const getRemoveMemberMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationKey = ["removeMember"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeMember>>,
    { fleetSlug: string; username: string }
  > = (props) => {
    const { fleetSlug, username } = props ?? {};

    return removeMember(fleetSlug, username);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeMember>>
>;

export type RemoveMemberMutationError = ErrorType<StandardError>;

/**
 * @summary Remove Fleet Member
 */
export const useRemoveMember = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof removeMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationOptions = getRemoveMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * No Member found
 * @summary Promote Member
 */
export const promoteMember = (
  fleetSlug: MaybeRef<string>,
  username: MaybeRef<string>,
) => {
  fleetSlug = unref(fleetSlug);
  username = unref(username);

  return axiosClient<FleetMember>({
    url: `/fleets/${fleetSlug}/members/${username}/promote`,
    method: "PUT",
  });
};

export const getPromoteMemberMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof promoteMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof promoteMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationKey = ["promoteMember"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof promoteMember>>,
    { fleetSlug: string; username: string }
  > = (props) => {
    const { fleetSlug, username } = props ?? {};

    return promoteMember(fleetSlug, username);
  };

  return { mutationFn, ...mutationOptions };
};

export type PromoteMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof promoteMember>>
>;

export type PromoteMemberMutationError = ErrorType<StandardError>;

/**
 * @summary Promote Member
 */
export const usePromoteMember = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof promoteMember>>,
    TError,
    { fleetSlug: string; username: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof promoteMember>>,
  TError,
  { fleetSlug: string; username: string },
  TContext
> => {
  const mutationOptions = getPromoteMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
