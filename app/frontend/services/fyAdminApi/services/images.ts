/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net Command API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  Image,
  ImageInput,
  ImageInputCreate,
  Images,
  ImagesParams,
  StandardError,
} from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary Image create
 */
export const createImage = (
  imageInputCreate: MaybeRef<ImageInputCreate>,
  signal?: AbortSignal,
) => {
  imageInputCreate = unref(imageInputCreate);
  const formData = new FormData();
  if (imageInputCreate.caption !== undefined) {
    formData.append("caption", imageInputCreate.caption);
  }
  if (imageInputCreate.enabled !== undefined) {
    formData.append("enabled", imageInputCreate.enabled.toString());
  }
  if (imageInputCreate.global !== undefined) {
    formData.append("global", imageInputCreate.global.toString());
  }
  if (imageInputCreate.background !== undefined) {
    formData.append("background", imageInputCreate.background.toString());
  }
  if (imageInputCreate.galleryId !== undefined) {
    formData.append("galleryId", imageInputCreate.galleryId);
  }
  if (imageInputCreate.galleryType !== undefined) {
    formData.append("galleryType", imageInputCreate.galleryType);
  }
  if (imageInputCreate.file !== undefined) {
    formData.append("file", imageInputCreate.file);
  }

  return axiosClient<Image>({
    url: `/images`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getCreateImageMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createImage>>,
    TError,
    { data: ImageInputCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createImage>>,
  TError,
  { data: ImageInputCreate },
  TContext
> => {
  const mutationKey = ["createImage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createImage>>,
    { data: ImageInputCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createImage(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof createImage>>
>;
export type CreateImageMutationBody = ImageInputCreate;
export type CreateImageMutationError = ErrorType<StandardError>;

/**
 * @summary Image create
 */
export const useCreateImage = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createImage>>,
    TError,
    { data: ImageInputCreate },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createImage>>,
  TError,
  { data: ImageInputCreate },
  TContext
> => {
  const mutationOptions = getCreateImageMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a List of Images
 * @summary Images list
 */
export const images = (
  params?: MaybeRef<ImagesParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Images>({
    url: `/images`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

const getImagesQueryKey = (params?: MaybeRef<ImagesParams>) => {
  return ["images", ...(params ? [params] : [])] as const;
};

export const useImagesQueryOptions = <
  TData = Awaited<ReturnType<typeof images>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<ImagesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof images>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getImagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof images>>> = ({
    signal,
  }) => images(params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof images>>,
    TError,
    TData
  >;
};

export type ImagesQueryResult = NonNullable<Awaited<ReturnType<typeof images>>>;
export type ImagesQueryError = ErrorType<StandardError>;

/**
 * @summary Images list
 */

export function useImages<
  TData = Awaited<ReturnType<typeof images>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<ImagesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof images>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useImagesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Image destroy
 */
export const destroyImage = (id: MaybeRef<string>) => {
  id = unref(id);

  return axiosClient<void>({ url: `/images/${id}`, method: "DELETE" });
};

export const getDestroyImageMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyImage>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyImage>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["destroyImage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyImage>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return destroyImage(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyImage>>
>;

export type DestroyImageMutationError = ErrorType<void>;

/**
 * @summary Image destroy
 */
export const useDestroyImage = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyImage>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyImage>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDestroyImageMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Image update
 */
export const updateImage = (
  id: MaybeRef<string>,
  imageInput: MaybeRef<ImageInput>,
) => {
  id = unref(id);
  imageInput = unref(imageInput);

  return axiosClient<Image>({
    url: `/images/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: imageInput,
  });
};

export const getUpdateImageMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateImage>>,
    TError,
    { id: string; data: ImageInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateImage>>,
  TError,
  { id: string; data: ImageInput },
  TContext
> => {
  const mutationKey = ["updateImage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateImage>>,
    { id: string; data: ImageInput }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateImage(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateImage>>
>;
export type UpdateImageMutationBody = ImageInput;
export type UpdateImageMutationError = ErrorType<StandardError>;

/**
 * @summary Image update
 */
export const useUpdateImage = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateImage>>,
    TError,
    { id: string; data: ImageInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateImage>>,
  TError,
  { id: string; data: ImageInput },
  TContext
> => {
  const mutationOptions = getUpdateImageMutationOptions(options);

  return useMutation(mutationOptions);
};
