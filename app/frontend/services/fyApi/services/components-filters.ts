/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";

import type { FilterOption } from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary Components Item Types Filters
 */
export const componentItemTypesFilters = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/filters/components/item-types`,
    method: "GET",
    signal,
  });
};

export const getComponentItemTypesFiltersQueryKey = () => {
  return ["filters", "components", "item-types"] as const;
};

export const useComponentItemTypesFiltersQueryOptions = <
  TData = Awaited<ReturnType<typeof componentItemTypesFilters>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof componentItemTypesFilters>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getComponentItemTypesFiltersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof componentItemTypesFilters>>
  > = ({ signal }) => componentItemTypesFilters(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof componentItemTypesFilters>>,
    TError,
    TData
  >;
};

export type ComponentItemTypesFiltersQueryResult = NonNullable<
  Awaited<ReturnType<typeof componentItemTypesFilters>>
>;
export type ComponentItemTypesFiltersQueryError = ErrorType<unknown>;

/**
 * @summary Components Item Types Filters
 */

export function useComponentItemTypesFilters<
  TData = Awaited<ReturnType<typeof componentItemTypesFilters>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof componentItemTypesFilters>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useComponentItemTypesFiltersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Components Classes Filters
 */
export const componentClassesFilters = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/filters/components/classes`,
    method: "GET",
    signal,
  });
};

export const getComponentClassesFiltersQueryKey = () => {
  return ["filters", "components", "classes"] as const;
};

export const useComponentClassesFiltersQueryOptions = <
  TData = Awaited<ReturnType<typeof componentClassesFilters>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof componentClassesFilters>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getComponentClassesFiltersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof componentClassesFilters>>
  > = ({ signal }) => componentClassesFilters(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof componentClassesFilters>>,
    TError,
    TData
  >;
};

export type ComponentClassesFiltersQueryResult = NonNullable<
  Awaited<ReturnType<typeof componentClassesFilters>>
>;
export type ComponentClassesFiltersQueryError = ErrorType<unknown>;

/**
 * @summary Components Classes Filters
 */

export function useComponentClassesFilters<
  TData = Awaited<ReturnType<typeof componentClassesFilters>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof componentClassesFilters>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useComponentClassesFiltersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
