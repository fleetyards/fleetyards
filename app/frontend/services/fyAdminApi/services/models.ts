/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * FleetYards.net Command API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  FilterOption,
  ModelExtended,
  ModelPaints,
  ModelUpdateInput,
  Models,
  ModelsParams,
  PaintsParams,
  StandardError,
} from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary Model Production states
 */
export const modelProductionStates = (signal?: AbortSignal) => {
  return axiosClient<FilterOption[]>({
    url: `/models/production-states`,
    method: "GET",
    signal,
  });
};

export const getModelProductionStatesQueryKey = () => {
  return ["models", "production-states"] as const;
};

export const useModelProductionStatesQueryOptions = <
  TData = Awaited<ReturnType<typeof modelProductionStates>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof modelProductionStates>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getModelProductionStatesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof modelProductionStates>>
  > = ({ signal }) => modelProductionStates(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof modelProductionStates>>,
    TError,
    TData
  >;
};

export type ModelProductionStatesQueryResult = NonNullable<
  Awaited<ReturnType<typeof modelProductionStates>>
>;
export type ModelProductionStatesQueryError = ErrorType<unknown>;

/**
 * @summary Model Production states
 */

export function useModelProductionStates<
  TData = Awaited<ReturnType<typeof modelProductionStates>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof modelProductionStates>>,
      TError,
      TData
    >
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useModelProductionStatesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Models list
 */
export const models = (
  params?: MaybeRef<ModelsParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Models>({
    url: `/models`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getModelsQueryKey = (params?: MaybeRef<ModelsParams>) => {
  return ["models", ...(params ? [params] : [])] as const;
};

export const useModelsQueryOptions = <
  TData = Awaited<ReturnType<typeof models>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<ModelsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof models>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getModelsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof models>>> = ({
    signal,
  }) => models(params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof models>>,
    TError,
    TData
  >;
};

export type ModelsQueryResult = NonNullable<Awaited<ReturnType<typeof models>>>;
export type ModelsQueryError = ErrorType<StandardError>;

/**
 * @summary Models list
 */

export function useModels<
  TData = Awaited<ReturnType<typeof models>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<ModelsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof models>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useModelsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Paints list
 */
export const paints = (
  params?: MaybeRef<PaintsParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<ModelPaints>({
    url: `/model-paints`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getPaintsQueryKey = (params?: MaybeRef<PaintsParams>) => {
  return ["model-paints", ...(params ? [params] : [])] as const;
};

export const usePaintsQueryOptions = <
  TData = Awaited<ReturnType<typeof paints>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<PaintsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paints>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getPaintsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paints>>> = ({
    signal,
  }) => paints(params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof paints>>,
    TError,
    TData
  >;
};

export type PaintsQueryResult = NonNullable<Awaited<ReturnType<typeof paints>>>;
export type PaintsQueryError = ErrorType<StandardError>;

/**
 * @summary Paints list
 */

export function usePaints<
  TData = Awaited<ReturnType<typeof paints>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<PaintsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof paints>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = usePaintsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Model Detail
 */
export const model = (id: MaybeRef<string>, signal?: AbortSignal) => {
  id = unref(id);

  return axiosClient<ModelExtended>({
    url: `/models/${id}`,
    method: "GET",
    signal,
  });
};

export const getModelQueryKey = (id: MaybeRef<string>) => {
  return ["models", id] as const;
};

export const useModelQueryOptions = <
  TData = Awaited<ReturnType<typeof model>>,
  TError = ErrorType<StandardError>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof model>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getModelQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof model>>> = ({
    signal,
  }) => model(id, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof model>>,
    TError,
    TData
  >;
};

export type ModelQueryResult = NonNullable<Awaited<ReturnType<typeof model>>>;
export type ModelQueryError = ErrorType<StandardError>;

/**
 * @summary Model Detail
 */

export function useModel<
  TData = Awaited<ReturnType<typeof model>>,
  TError = ErrorType<StandardError>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof model>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useModelQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Update Model
 */
export const updateModel = (
  id: MaybeRef<string>,
  modelUpdateInput: MaybeRef<ModelUpdateInput>,
) => {
  id = unref(id);
  modelUpdateInput = unref(modelUpdateInput);

  return axiosClient<ModelExtended>({
    url: `/models/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: modelUpdateInput,
  });
};

export const getUpdateModelMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateModel>>,
    TError,
    { id: string; data: ModelUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateModel>>,
  TError,
  { id: string; data: ModelUpdateInput },
  TContext
> => {
  const mutationKey = ["updateModel"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateModel>>,
    { id: string; data: ModelUpdateInput }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateModel(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateModelMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateModel>>
>;
export type UpdateModelMutationBody = ModelUpdateInput;
export type UpdateModelMutationError = ErrorType<StandardError>;

/**
 * @summary Update Model
 */
export const useUpdateModel = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateModel>>,
    TError,
    { id: string; data: ModelUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateModel>>,
  TError,
  { id: string; data: ModelUpdateInput },
  TContext
> => {
  const mutationOptions = getUpdateModelMutationOptions(options);

  return useMutation(mutationOptions);
};
