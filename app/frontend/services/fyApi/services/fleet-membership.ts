/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  FleetMember,
  FleetMembershipUpdateInput,
  StandardError,
  StandardMessage,
  ValidationError,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * No Membership found
 * @summary Accept Membership
 */
export const acceptMembership = (fleetSlug: MaybeRef<string>) => {
  fleetSlug = unref(fleetSlug);

  return axiosClient<StandardMessage>({
    url: `/fleets/${fleetSlug}/membership/accept`,
    method: "PUT",
  });
};

export const getAcceptMembershipMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptMembership>>,
    TError,
    { fleetSlug: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptMembership>>,
  TError,
  { fleetSlug: string },
  TContext
> => {
  const mutationKey = ["acceptMembership"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptMembership>>,
    { fleetSlug: string }
  > = (props) => {
    const { fleetSlug } = props ?? {};

    return acceptMembership(fleetSlug);
  };

  return { mutationFn, ...mutationOptions };
};

export type AcceptMembershipMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptMembership>>
>;

export type AcceptMembershipMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Accept Membership
 */
export const useAcceptMembership = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptMembership>>,
    TError,
    { fleetSlug: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof acceptMembership>>,
  TError,
  { fleetSlug: string },
  TContext
> => {
  const mutationOptions = getAcceptMembershipMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * No Membership found
 * @summary Decline Membership
 */
export const declineMembership = (fleetSlug: MaybeRef<string>) => {
  fleetSlug = unref(fleetSlug);

  return axiosClient<StandardMessage>({
    url: `/fleets/${fleetSlug}/membership/decline`,
    method: "PUT",
  });
};

export const getDeclineMembershipMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineMembership>>,
    TError,
    { fleetSlug: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof declineMembership>>,
  TError,
  { fleetSlug: string },
  TContext
> => {
  const mutationKey = ["declineMembership"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof declineMembership>>,
    { fleetSlug: string }
  > = (props) => {
    const { fleetSlug } = props ?? {};

    return declineMembership(fleetSlug);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeclineMembershipMutationResult = NonNullable<
  Awaited<ReturnType<typeof declineMembership>>
>;

export type DeclineMembershipMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Decline Membership
 */
export const useDeclineMembership = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineMembership>>,
    TError,
    { fleetSlug: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof declineMembership>>,
  TError,
  { fleetSlug: string },
  TContext
> => {
  const mutationOptions = getDeclineMembershipMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Leave Fleet
 */
export const leaveFleet = (fleetSlug: MaybeRef<string>) => {
  fleetSlug = unref(fleetSlug);

  return axiosClient<void>({
    url: `/fleets/${fleetSlug}/membership`,
    method: "DELETE",
  });
};

export const getLeaveFleetMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof leaveFleet>>,
    TError,
    { fleetSlug: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof leaveFleet>>,
  TError,
  { fleetSlug: string },
  TContext
> => {
  const mutationKey = ["leaveFleet"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof leaveFleet>>,
    { fleetSlug: string }
  > = (props) => {
    const { fleetSlug } = props ?? {};

    return leaveFleet(fleetSlug);
  };

  return { mutationFn, ...mutationOptions };
};

export type LeaveFleetMutationResult = NonNullable<
  Awaited<ReturnType<typeof leaveFleet>>
>;

export type LeaveFleetMutationError = ErrorType<StandardError>;

/**
 * @summary Leave Fleet
 */
export const useLeaveFleet = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof leaveFleet>>,
    TError,
    { fleetSlug: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof leaveFleet>>,
  TError,
  { fleetSlug: string },
  TContext
> => {
  const mutationOptions = getLeaveFleetMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Membership for this slug and user does not exist
 * @summary Fleet Membership Detail
 */
export const membership = (
  fleetSlug: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);

  return axiosClient<FleetMember>({
    url: `/fleets/${fleetSlug}/membership`,
    method: "GET",
    signal,
  });
};

export const getMembershipQueryKey = (fleetSlug: MaybeRef<string>) => {
  return ["fleets", fleetSlug, "membership"] as const;
};

export const getMembershipQueryOptions = <
  TData = Awaited<ReturnType<typeof membership>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof membership>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getMembershipQueryKey(fleetSlug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof membership>>> = ({
    signal,
  }) => membership(fleetSlug, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(fleetSlug)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof membership>>, TError, TData>;
};

export type MembershipQueryResult = NonNullable<
  Awaited<ReturnType<typeof membership>>
>;
export type MembershipQueryError = ErrorType<StandardError>;

/**
 * @summary Fleet Membership Detail
 */

export function useMembership<
  TData = Awaited<ReturnType<typeof membership>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof membership>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getMembershipQueryOptions(fleetSlug, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * Fleet for this slug and user does not exist
 * @summary Update Membership
 */
export const updateMembership = (
  fleetSlug: MaybeRef<string>,
  fleetMembershipUpdateInput: MaybeRef<FleetMembershipUpdateInput>,
) => {
  fleetSlug = unref(fleetSlug);
  fleetMembershipUpdateInput = unref(fleetMembershipUpdateInput);

  return axiosClient<FleetMember>({
    url: `/fleets/${fleetSlug}/membership`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: fleetMembershipUpdateInput,
  });
};

export const getUpdateMembershipMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMembership>>,
    TError,
    { fleetSlug: string; data: FleetMembershipUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMembership>>,
  TError,
  { fleetSlug: string; data: FleetMembershipUpdateInput },
  TContext
> => {
  const mutationKey = ["updateMembership"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMembership>>,
    { fleetSlug: string; data: FleetMembershipUpdateInput }
  > = (props) => {
    const { fleetSlug, data } = props ?? {};

    return updateMembership(fleetSlug, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMembershipMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMembership>>
>;
export type UpdateMembershipMutationBody = FleetMembershipUpdateInput;
export type UpdateMembershipMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Update Membership
 */
export const useUpdateMembership = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMembership>>,
    TError,
    { fleetSlug: string; data: FleetMembershipUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateMembership>>,
  TError,
  { fleetSlug: string; data: FleetMembershipUpdateInput },
  TContext
> => {
  const mutationOptions = getUpdateMembershipMutationOptions(options);

  return useMutation(mutationOptions);
};
