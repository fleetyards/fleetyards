/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/vue-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  CheckInput,
  StandardError,
  VehicleCreateBulkInput,
  VehicleCreateInput,
  VehicleDestroyBulkInput,
  VehicleUpdateBulkInput,
  VehicleUpdateInput
} from '../models';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  BoughtViaEnum,
  ComponentItemClassEnum,
  HardpointCategoryEnum,
  HardpointGroupEnum,
  HardpointSourceEnum,
  ItemPriceItemTypeEnum,
  ItemPriceTimeRangeEnum,
  ItemPriceTypeEnum,
  ModelProductionStatusEnum,
  ThrusterClassEnum
} from '../models';
import type {
  Check,
  Vehicle
} from '../models';

import { axiosClient } from '../../axiosClient';
import type { ErrorType } from '../../axiosClient';





/**
 * @summary Check Vehicle Serial
 */
export const checkSerialVehicle = (
    checkInput: MaybeRef<CheckInput>,
 signal?: AbortSignal
) => {
      checkInput = unref(checkInput);
      
      return axiosClient<Check>(
      {url: `/vehicles/check-serial`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: checkInput, signal
    },
      );
    }
  


export const getCheckSerialVehicleMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkSerialVehicle>>, TError,{data: CheckInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof checkSerialVehicle>>, TError,{data: CheckInput}, TContext> => {
    
const mutationKey = ['checkSerialVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkSerialVehicle>>, {data: CheckInput}> = (props) => {
          const {data} = props ?? {};

          return  checkSerialVehicle(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CheckSerialVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof checkSerialVehicle>>>
    export type CheckSerialVehicleMutationBody = CheckInput
    export type CheckSerialVehicleMutationError = ErrorType<StandardError>

    /**
 * @summary Check Vehicle Serial
 */
export const useCheckSerialVehicle = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkSerialVehicle>>, TError,{data: CheckInput}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof checkSerialVehicle>>,
        TError,
        {data: CheckInput},
        TContext
      > => {

      const mutationOptions = getCheckSerialVehicleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create multiple vehicles
 */
export const createBulkVehicle = (
    vehicleCreateBulkInput: MaybeRef<VehicleCreateBulkInput>,
 signal?: AbortSignal
) => {
      vehicleCreateBulkInput = unref(vehicleCreateBulkInput);
      
      return axiosClient<void>(
      {url: `/vehicles/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vehicleCreateBulkInput, signal
    },
      );
    }
  


export const getCreateBulkVehicleMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBulkVehicle>>, TError,{data: VehicleCreateBulkInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createBulkVehicle>>, TError,{data: VehicleCreateBulkInput}, TContext> => {
    
const mutationKey = ['createBulkVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBulkVehicle>>, {data: VehicleCreateBulkInput}> = (props) => {
          const {data} = props ?? {};

          return  createBulkVehicle(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateBulkVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof createBulkVehicle>>>
    export type CreateBulkVehicleMutationBody = VehicleCreateBulkInput
    export type CreateBulkVehicleMutationError = ErrorType<StandardError>

    /**
 * @summary Create multiple vehicles
 */
export const useCreateBulkVehicle = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBulkVehicle>>, TError,{data: VehicleCreateBulkInput}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof createBulkVehicle>>,
        TError,
        {data: VehicleCreateBulkInput},
        TContext
      > => {

      const mutationOptions = getCreateBulkVehicleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Update multiple vehicles
 */
export const updateBulkVehicle = (
    vehicleUpdateBulkInput: MaybeRef<VehicleUpdateBulkInput>,
 ) => {
      vehicleUpdateBulkInput = unref(vehicleUpdateBulkInput);
      
      return axiosClient<void>(
      {url: `/vehicles/bulk`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vehicleUpdateBulkInput
    },
      );
    }
  


export const getUpdateBulkVehicleMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBulkVehicle>>, TError,{data: VehicleUpdateBulkInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateBulkVehicle>>, TError,{data: VehicleUpdateBulkInput}, TContext> => {
    
const mutationKey = ['updateBulkVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBulkVehicle>>, {data: VehicleUpdateBulkInput}> = (props) => {
          const {data} = props ?? {};

          return  updateBulkVehicle(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBulkVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof updateBulkVehicle>>>
    export type UpdateBulkVehicleMutationBody = VehicleUpdateBulkInput
    export type UpdateBulkVehicleMutationError = ErrorType<StandardError>

    /**
 * @summary Update multiple vehicles
 */
export const useUpdateBulkVehicle = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBulkVehicle>>, TError,{data: VehicleUpdateBulkInput}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof updateBulkVehicle>>,
        TError,
        {data: VehicleUpdateBulkInput},
        TContext
      > => {

      const mutationOptions = getUpdateBulkVehicleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create new Vehicle
 */
export const createVehicle = (
    vehicleCreateInput: MaybeRef<VehicleCreateInput>,
 signal?: AbortSignal
) => {
      vehicleCreateInput = unref(vehicleCreateInput);
      
      return axiosClient<Vehicle>(
      {url: `/vehicles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vehicleCreateInput, signal
    },
      );
    }
  


export const getCreateVehicleMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVehicle>>, TError,{data: VehicleCreateInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createVehicle>>, TError,{data: VehicleCreateInput}, TContext> => {
    
const mutationKey = ['createVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createVehicle>>, {data: VehicleCreateInput}> = (props) => {
          const {data} = props ?? {};

          return  createVehicle(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof createVehicle>>>
    export type CreateVehicleMutationBody = VehicleCreateInput
    export type CreateVehicleMutationError = ErrorType<StandardError>

    /**
 * @summary Create new Vehicle
 */
export const useCreateVehicle = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVehicle>>, TError,{data: VehicleCreateInput}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof createVehicle>>,
        TError,
        {data: VehicleCreateInput},
        TContext
      > => {

      const mutationOptions = getCreateVehicleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete all ingame bought Vehicles
 */
export const destroyAllIngameVehicles = (
    
 ) => {
      
      
      return axiosClient<void>(
      {url: `/vehicles/destroy-all-ingame`, method: 'DELETE'
    },
      );
    }
  


export const getDestroyAllIngameVehiclesMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof destroyAllIngameVehicles>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof destroyAllIngameVehicles>>, TError,void, TContext> => {
    
const mutationKey = ['destroyAllIngameVehicles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof destroyAllIngameVehicles>>, void> = () => {
          

          return  destroyAllIngameVehicles()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DestroyAllIngameVehiclesMutationResult = NonNullable<Awaited<ReturnType<typeof destroyAllIngameVehicles>>>
    
    export type DestroyAllIngameVehiclesMutationError = ErrorType<StandardError>

    /**
 * @summary Delete all ingame bought Vehicles
 */
export const useDestroyAllIngameVehicles = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof destroyAllIngameVehicles>>, TError,void, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof destroyAllIngameVehicles>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDestroyAllIngameVehiclesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Destroy multiple Vehicles
 */
export const destroyBulkVehicle = (
    vehicleDestroyBulkInput: MaybeRef<VehicleDestroyBulkInput>,
 ) => {
      vehicleDestroyBulkInput = unref(vehicleDestroyBulkInput);
      
      return axiosClient<void>(
      {url: `/vehicles/destroy-bulk`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vehicleDestroyBulkInput
    },
      );
    }
  


export const getDestroyBulkVehicleMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof destroyBulkVehicle>>, TError,{data: VehicleDestroyBulkInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof destroyBulkVehicle>>, TError,{data: VehicleDestroyBulkInput}, TContext> => {
    
const mutationKey = ['destroyBulkVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof destroyBulkVehicle>>, {data: VehicleDestroyBulkInput}> = (props) => {
          const {data} = props ?? {};

          return  destroyBulkVehicle(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DestroyBulkVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof destroyBulkVehicle>>>
    export type DestroyBulkVehicleMutationBody = VehicleDestroyBulkInput
    export type DestroyBulkVehicleMutationError = ErrorType<StandardError>

    /**
 * @summary Destroy multiple Vehicles
 */
export const useDestroyBulkVehicle = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof destroyBulkVehicle>>, TError,{data: VehicleDestroyBulkInput}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof destroyBulkVehicle>>,
        TError,
        {data: VehicleDestroyBulkInput},
        TContext
      > => {

      const mutationOptions = getDestroyBulkVehicleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Vehicle
 */
export const destroyVehicle = (
    id: MaybeRef<string>,
 ) => {
      id = unref(id);
      
      return axiosClient<Vehicle>(
      {url: `/vehicles/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDestroyVehicleMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof destroyVehicle>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof destroyVehicle>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['destroyVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof destroyVehicle>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  destroyVehicle(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DestroyVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof destroyVehicle>>>
    
    export type DestroyVehicleMutationError = ErrorType<StandardError>

    /**
 * @summary Delete Vehicle
 */
export const useDestroyVehicle = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof destroyVehicle>>, TError,{id: string}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof destroyVehicle>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDestroyVehicleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Update Vehicle
 */
export const updateVehicle = (
    id: MaybeRef<string>,
    vehicleUpdateInput: MaybeRef<VehicleUpdateInput>,
 ) => {
      id = unref(id);
vehicleUpdateInput = unref(vehicleUpdateInput);
      
      return axiosClient<Vehicle>(
      {url: `/vehicles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vehicleUpdateInput
    },
      );
    }
  


export const getUpdateVehicleMutationOptions = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateVehicle>>, TError,{id: string;data: VehicleUpdateInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateVehicle>>, TError,{id: string;data: VehicleUpdateInput}, TContext> => {
    
const mutationKey = ['updateVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateVehicle>>, {id: string;data: VehicleUpdateInput}> = (props) => {
          const {id,data} = props ?? {};

          return  updateVehicle(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof updateVehicle>>>
    export type UpdateVehicleMutationBody = VehicleUpdateInput
    export type UpdateVehicleMutationError = ErrorType<StandardError>

    /**
 * @summary Update Vehicle
 */
export const useUpdateVehicle = <TError = ErrorType<StandardError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateVehicle>>, TError,{id: string;data: VehicleUpdateInput}, TContext>, }
): UseMutationReturnType<
        Awaited<ReturnType<typeof updateVehicle>>,
        TError,
        {id: string;data: VehicleUpdateInput},
        TContext
      > => {

      const mutationOptions = getUpdateVehicleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    

export const getCheckSerialVehicleResponseMock = (overrideResponse: Partial< Check > = {}): Check => ({taken: faker.datatype.boolean(), ...overrideResponse})

export const getCreateVehicleResponseMock = (overrideResponse: Partial< Vehicle > = {}): Vehicle => ({id: faker.string.uuid(), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), serial: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), alternativeNames: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), boughtVia: faker.helpers.arrayElement(Object.values(BoughtViaEnum)), boughtViaLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), flagship: faker.datatype.boolean(), hangarGroupIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), hangarGroups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), color: faker.string.alpha(20), public: faker.datatype.boolean(), sort: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), vehiclesCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), loaner: faker.datatype.boolean(), model: {id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, modelModuleIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), modelUpgradeIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), modulePackage: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metrics: faker.helpers.arrayElement([{cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), productionStatus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), nameVisible: faker.datatype.boolean(), paint: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, nameWithModel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, angledView: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), fleetchartImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), sideView: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topView: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined])}, undefined]), public: faker.datatype.boolean(), saleNotify: faker.datatype.boolean(), upgrade: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined])}, undefined]), wanted: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getDestroyVehicleResponseMock = (overrideResponse: Partial< Vehicle > = {}): Vehicle => ({id: faker.string.uuid(), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), serial: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), alternativeNames: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), boughtVia: faker.helpers.arrayElement(Object.values(BoughtViaEnum)), boughtViaLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), flagship: faker.datatype.boolean(), hangarGroupIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), hangarGroups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), color: faker.string.alpha(20), public: faker.datatype.boolean(), sort: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), vehiclesCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), loaner: faker.datatype.boolean(), model: {id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, modelModuleIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), modelUpgradeIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), modulePackage: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metrics: faker.helpers.arrayElement([{cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), productionStatus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), nameVisible: faker.datatype.boolean(), paint: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, nameWithModel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, angledView: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), fleetchartImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), sideView: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topView: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined])}, undefined]), public: faker.datatype.boolean(), saleNotify: faker.datatype.boolean(), upgrade: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined])}, undefined]), wanted: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getUpdateVehicleResponseMock = (overrideResponse: Partial< Vehicle > = {}): Vehicle => ({id: faker.string.uuid(), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), serial: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), alternativeNames: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), boughtVia: faker.helpers.arrayElement(Object.values(BoughtViaEnum)), boughtViaLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), flagship: faker.datatype.boolean(), hangarGroupIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), hangarGroups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), color: faker.string.alpha(20), public: faker.datatype.boolean(), sort: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), vehiclesCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), loaner: faker.datatype.boolean(), model: {id: faker.string.uuid(), scIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), slug: faker.string.alpha(20), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rentalAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, brochure: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classification: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), classificationLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), crew: {max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), erkulIdentifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), focus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasImages: faker.datatype.boolean(), hasModules: faker.datatype.boolean(), hasPaints: faker.datatype.boolean(), hasUpgrades: faker.datatype.boolean(), hasVideos: faker.datatype.boolean(), holo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastPledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lastPledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), links: {salesPageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), storeUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, loaners: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.string.alpha(20), slug: faker.string.alpha(20)})), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), angledViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), frontView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), frontViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topViewColored: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, metrics: {beam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), beamLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cargoLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fleetchartLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), heightLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hydrogenFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isGroundVehicle: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), lengthLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), mass: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), massLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), quantumFuelTankSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sizeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), dockSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), hydrogenFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), quantumFuelTanks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({capacity: faker.number.int({min: undefined, max: undefined})})), undefined]), onSale: faker.datatype.boolean(), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pledgePriceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priceLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionNote: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), productionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ModelProductionStatusEnum)), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), speeds: {groundAcceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundDecceleration: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundMaxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), groundReverseSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitch: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pitchBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roll: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rollBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), scmSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reverseSpeedBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yaw: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yawBoosted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, modelModuleIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), modelUpgradeIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), modulePackage: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metrics: faker.helpers.arrayElement([{cargo: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), cargoHolds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}})), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), productionStatus: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), group: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointGroupEnum)), undefined]), groupKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), matrixKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), category: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointCategoryEnum)), undefined]), name: faker.string.alpha(20), minSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), source: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(HardpointSourceEnum)), undefined]), types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), component: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), scKey: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hidden: faker.datatype.boolean(), category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), subType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), inventoryConsumption: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), grade: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), gradeLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), itemClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ComponentItemClassEnum)), undefined]), itemClassLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, manufacturer: faker.helpers.arrayElement([{name: faker.string.alpha(20), slug: faker.string.alpha(20), code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), logo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), longName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scRef: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, typeData: faker.helpers.arrayElement([faker.helpers.arrayElement([{fuelRate: faker.number.int({min: undefined, max: undefined}), jumpRange: faker.number.int({min: undefined, max: undefined}), standardJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}, splineJump: {speed: faker.number.int({min: undefined, max: undefined}), stage1AccelerationRate: faker.number.int({min: undefined, max: undefined}), stage2AccelerationRate: faker.number.int({min: undefined, max: undefined}), spoolUpTime: faker.number.int({min: undefined, max: undefined}), cooldown: faker.number.int({min: undefined, max: undefined})}},{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined}), maxContainerSize: {size: faker.number.int({min: undefined, max: undefined}), dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}}, limits: {min: {dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, max: faker.helpers.arrayElement([{dimensions: {x: faker.number.int({min: undefined, max: undefined}), y: faker.number.int({min: undefined, max: undefined}), z: faker.number.int({min: undefined, max: undefined})}, capacity: faker.number.int({min: undefined, max: undefined})}, undefined])}},{capacity: faker.number.int({min: undefined, max: undefined})},{thrustCapacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), thrusterType: faker.string.alpha(20), thrusterClass: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ThrusterClassEnum)), undefined]), fuelBurnRatePer10KNewton: faker.number.int({min: undefined, max: undefined})},]), undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), hardpoints: faker.helpers.arrayElement([[], undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topView: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewMedium: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewSmall: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), nameVisible: faker.datatype.boolean(), paint: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), slug: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastUpdatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lastUpdatedAtLabel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), availability: {boughtAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), soldAt: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), price: faker.number.int({min: undefined, max: undefined}), timeRange: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ItemPriceTimeRangeEnum)), undefined]), priceType: faker.helpers.arrayElement(Object.values(ItemPriceTypeEnum)), itemId: faker.string.uuid(), itemType: faker.helpers.arrayElement(Object.values(ItemPriceItemTypeEnum)), location: faker.string.alpha(20), locationUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}))}, media: {angledView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), fleetchartImage: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sideView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), topView: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, nameWithModel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), rsiName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), rsiSlug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, angledView: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), angledViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), angledViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), fleetchartImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), hasStoreImage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), sideView: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), sideViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sideViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topView: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewHeight: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewSmall: faker.helpers.arrayElement([faker.internet.url(), undefined]), topViewWidth: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), topViewXlarge: faker.helpers.arrayElement([faker.internet.url(), undefined])}, undefined]), public: faker.datatype.boolean(), saleNotify: faker.datatype.boolean(), upgrade: faker.helpers.arrayElement([{id: faker.string.uuid(), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pledgePrice: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), media: {storeImage: faker.helpers.arrayElement([{name: faker.string.alpha(20), contentType: faker.string.alpha(20), size: faker.number.int({min: undefined, max: undefined}), url: faker.internet.url(), smallUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), mediumUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), largeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), xlargeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), width: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), height: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uploadedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined])}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, storeImage: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageLarge: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageMedium: faker.helpers.arrayElement([faker.internet.url(), undefined]), storeImageSmall: faker.helpers.arrayElement([faker.internet.url(), undefined])}, undefined]), wanted: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})


export const getCheckSerialVehicleMockHandler = (overrideResponse?: Check | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Check> | Check)) => {
  return http.post('*/vehicles/check-serial', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCheckSerialVehicleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateBulkVehicleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/vehicles/bulk', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getUpdateBulkVehicleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/vehicles/bulk', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getCreateVehicleMockHandler = (overrideResponse?: Vehicle | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Vehicle> | Vehicle)) => {
  return http.post('*/vehicles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateVehicleResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDestroyAllIngameVehiclesMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/vehicles/destroy-all-ingame', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getDestroyBulkVehicleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/vehicles/destroy-bulk', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getDestroyVehicleMockHandler = (overrideResponse?: Vehicle | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Vehicle> | Vehicle)) => {
  return http.delete('*/vehicles/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDestroyVehicleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateVehicleMockHandler = (overrideResponse?: Vehicle | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Vehicle> | Vehicle)) => {
  return http.put('*/vehicles/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateVehicleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getVehiclesMock = () => [
  getCheckSerialVehicleMockHandler(),
  getCreateBulkVehicleMockHandler(),
  getUpdateBulkVehicleMockHandler(),
  getCreateVehicleMockHandler(),
  getDestroyAllIngameVehiclesMockHandler(),
  getDestroyBulkVehicleMockHandler(),
  getDestroyVehicleMockHandler(),
  getUpdateVehicleMockHandler()
]
