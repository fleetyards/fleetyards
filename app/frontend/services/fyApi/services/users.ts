/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  AccountUpdateInput,
  Check,
  CheckInput,
  StandardError,
  StandardMessage,
  User,
  UserCreateInput,
  UserUpdateInput,
  ValidationError,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Check E-Mail Availability
 */
export const checkEmail = (
  checkInput: MaybeRef<CheckInput>,
  signal?: AbortSignal,
) => {
  checkInput = unref(checkInput);

  return axiosClient<Check>({
    url: `/users/check-email`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: checkInput,
    signal,
  });
};

export const getCheckEmailMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkEmail>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof checkEmail>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationKey = ["checkEmail"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checkEmail>>,
    { data: CheckInput }
  > = (props) => {
    const { data } = props ?? {};

    return checkEmail(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CheckEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof checkEmail>>
>;
export type CheckEmailMutationBody = CheckInput;
export type CheckEmailMutationError = ErrorType<unknown>;

/**
 * @summary Check E-Mail Availability
 */
export const useCheckEmail = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkEmail>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof checkEmail>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationOptions = getCheckEmailMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Check Username Availability
 */
export const checkUsername = (
  checkInput: MaybeRef<CheckInput>,
  signal?: AbortSignal,
) => {
  checkInput = unref(checkInput);

  return axiosClient<Check>({
    url: `/users/check-username`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: checkInput,
    signal,
  });
};

export const getCheckUsernameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkUsername>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof checkUsername>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationKey = ["checkUsername"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checkUsername>>,
    { data: CheckInput }
  > = (props) => {
    const { data } = props ?? {};

    return checkUsername(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CheckUsernameMutationResult = NonNullable<
  Awaited<ReturnType<typeof checkUsername>>
>;
export type CheckUsernameMutationBody = CheckInput;
export type CheckUsernameMutationError = ErrorType<unknown>;

/**
 * @summary Check Username Availability
 */
export const useCheckUsername = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkUsername>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof checkUsername>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationOptions = getCheckUsernameMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Create new User
 */
export const signup = (
  userCreateInput: MaybeRef<UserCreateInput>,
  signal?: AbortSignal,
) => {
  userCreateInput = unref(userCreateInput);

  return axiosClient<User>({
    url: `/users/signup`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userCreateInput,
    signal,
  });
};

export const getSignupMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signup>>,
    TError,
    { data: UserCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signup>>,
  TError,
  { data: UserCreateInput },
  TContext
> => {
  const mutationKey = ["signup"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signup>>,
    { data: UserCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return signup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof signup>>
>;
export type SignupMutationBody = UserCreateInput;
export type SignupMutationError = ErrorType<ValidationError | StandardError>;

/**
 * @summary Create new User
 */
export const useSignup = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signup>>,
    TError,
    { data: UserCreateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof signup>>,
  TError,
  { data: UserCreateInput },
  TContext
> => {
  const mutationOptions = getSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Destroy Account
 */
export const destroyAccount = () => {
  return axiosClient<StandardMessage>({ url: `/users/me`, method: "DELETE" });
};

export const getDestroyAccountMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyAccount>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyAccount>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["destroyAccount"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyAccount>>,
    void
  > = () => {
    return destroyAccount();
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyAccount>>
>;

export type DestroyAccountMutationError = ErrorType<StandardError>;

/**
 * @summary Destroy Account
 */
export const useDestroyAccount = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyAccount>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyAccount>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDestroyAccountMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary My Data
 */
export const me = (signal?: AbortSignal) => {
  return axiosClient<User>({ url: `/users/me`, method: "GET", signal });
};

export const getMeQueryKey = () => {
  return ["users", "me"] as const;
};

export const getMeQueryOptions = <
  TData = Awaited<ReturnType<typeof me>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof me>>> = ({ signal }) =>
    me(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof me>>,
    TError,
    TData
  >;
};

export type MeQueryResult = NonNullable<Awaited<ReturnType<typeof me>>>;
export type MeQueryError = ErrorType<StandardError>;

/**
 * @summary My Data
 */

export function useMe<
  TData = Awaited<ReturnType<typeof me>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof me>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Update My Data
 */
export const updateProfile = (userUpdateInput: MaybeRef<UserUpdateInput>) => {
  userUpdateInput = unref(userUpdateInput);
  const formData = new FormData();
  if (userUpdateInput.avatar !== undefined) {
    formData.append("avatar", userUpdateInput.avatar);
  }
  if (userUpdateInput.removeAvatar !== undefined) {
    formData.append("removeAvatar", userUpdateInput.removeAvatar.toString());
  }
  if (userUpdateInput.rsiHandle !== undefined) {
    formData.append("rsiHandle", userUpdateInput.rsiHandle);
  }
  if (userUpdateInput.homepage !== undefined) {
    formData.append("homepage", userUpdateInput.homepage);
  }
  if (userUpdateInput.discord !== undefined) {
    formData.append("discord", userUpdateInput.discord);
  }
  if (userUpdateInput.youtube !== undefined) {
    formData.append("youtube", userUpdateInput.youtube);
  }
  if (userUpdateInput.guilded !== undefined) {
    formData.append("guilded", userUpdateInput.guilded);
  }
  if (userUpdateInput.twitch !== undefined) {
    formData.append("twitch", userUpdateInput.twitch);
  }
  if (userUpdateInput.saleNotify !== undefined) {
    formData.append("saleNotify", userUpdateInput.saleNotify.toString());
  }
  if (userUpdateInput.publicHangar !== undefined) {
    formData.append("publicHangar", userUpdateInput.publicHangar.toString());
  }
  if (userUpdateInput.publicHangarLoaners !== undefined) {
    formData.append(
      "publicHangarLoaners",
      userUpdateInput.publicHangarLoaners.toString(),
    );
  }
  if (userUpdateInput.publicWishlist !== undefined) {
    formData.append(
      "publicWishlist",
      userUpdateInput.publicWishlist.toString(),
    );
  }
  if (userUpdateInput.hideOwner !== undefined) {
    formData.append("hideOwner", userUpdateInput.hideOwner.toString());
  }

  return axiosClient<User>({
    url: `/users/me`,
    method: "PUT",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getUpdateProfileMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProfile>>,
    TError,
    { data: UserUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateProfile>>,
  TError,
  { data: UserUpdateInput },
  TContext
> => {
  const mutationKey = ["updateProfile"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProfile>>,
    { data: UserUpdateInput }
  > = (props) => {
    const { data } = props ?? {};

    return updateProfile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProfile>>
>;
export type UpdateProfileMutationBody = UserUpdateInput;
export type UpdateProfileMutationError = ErrorType<StandardError>;

/**
 * @summary Update My Data
 */
export const useUpdateProfile = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProfile>>,
    TError,
    { data: UserUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateProfile>>,
  TError,
  { data: UserUpdateInput },
  TContext
> => {
  const mutationOptions = getUpdateProfileMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update My Account
 */
export const updateAccount = (
  accountUpdateInput: MaybeRef<AccountUpdateInput>,
) => {
  accountUpdateInput = unref(accountUpdateInput);

  return axiosClient<User>({
    url: `/users/account`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: accountUpdateInput,
  });
};

export const getUpdateAccountMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAccount>>,
    TError,
    { data: AccountUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAccount>>,
  TError,
  { data: AccountUpdateInput },
  TContext
> => {
  const mutationKey = ["updateAccount"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAccount>>,
    { data: AccountUpdateInput }
  > = (props) => {
    const { data } = props ?? {};

    return updateAccount(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAccount>>
>;
export type UpdateAccountMutationBody = AccountUpdateInput;
export type UpdateAccountMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Update My Account
 */
export const useUpdateAccount = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAccount>>,
    TError,
    { data: AccountUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateAccount>>,
  TError,
  { data: AccountUpdateInput },
  TContext
> => {
  const mutationOptions = getUpdateAccountMutationOptions(options);

  return useMutation(mutationOptions);
};
