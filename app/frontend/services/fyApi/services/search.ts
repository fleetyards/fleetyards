/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type { SearchParams, SearchResult } from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary list searches
 */
export const search = (
  params?: MaybeRef<SearchParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<SearchResult[]>({
    url: `/search`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getSearchQueryKey = (params?: MaybeRef<SearchParams>) => {
  return ["search", ...(params ? [params] : [])] as const;
};

export const getSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof search>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<SearchParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getSearchQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof search>>> = ({
    signal,
  }) => search(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof search>>,
    TError,
    TData
  >;
};

export type SearchQueryResult = NonNullable<Awaited<ReturnType<typeof search>>>;
export type SearchQueryError = ErrorType<unknown>;

/**
 * @summary list searches
 */

export function useSearch<
  TData = Awaited<ReturnType<typeof search>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<SearchParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getSearchQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
