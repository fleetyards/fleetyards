/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation } from "@tanstack/vue-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  Check,
  CheckInput,
  StandardError,
  Vehicle,
  VehicleCreateBulkInput,
  VehicleCreateInput,
  VehicleDestroyBulkInput,
  VehicleUpdateBulkInput,
  VehicleUpdateInput,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Check Vehicle Serial
 */
export const checkSerialVehicle = (
  checkInput: MaybeRef<CheckInput>,
  signal?: AbortSignal,
) => {
  checkInput = unref(checkInput);

  return axiosClient<Check>({
    url: `/vehicles/check-serial`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: checkInput,
    signal,
  });
};

export const getCheckSerialVehicleMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkSerialVehicle>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof checkSerialVehicle>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationKey = ["checkSerialVehicle"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checkSerialVehicle>>,
    { data: CheckInput }
  > = (props) => {
    const { data } = props ?? {};

    return checkSerialVehicle(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CheckSerialVehicleMutationResult = NonNullable<
  Awaited<ReturnType<typeof checkSerialVehicle>>
>;
export type CheckSerialVehicleMutationBody = CheckInput;
export type CheckSerialVehicleMutationError = ErrorType<StandardError>;

/**
 * @summary Check Vehicle Serial
 */
export const useCheckSerialVehicle = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkSerialVehicle>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof checkSerialVehicle>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationOptions = getCheckSerialVehicleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Create multiple vehicles
 */
export const createBulkVehicle = (
  vehicleCreateBulkInput: MaybeRef<VehicleCreateBulkInput>,
  signal?: AbortSignal,
) => {
  vehicleCreateBulkInput = unref(vehicleCreateBulkInput);

  return axiosClient<void>({
    url: `/vehicles/bulk`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: vehicleCreateBulkInput,
    signal,
  });
};

export const getCreateBulkVehicleMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBulkVehicle>>,
    TError,
    { data: VehicleCreateBulkInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createBulkVehicle>>,
  TError,
  { data: VehicleCreateBulkInput },
  TContext
> => {
  const mutationKey = ["createBulkVehicle"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createBulkVehicle>>,
    { data: VehicleCreateBulkInput }
  > = (props) => {
    const { data } = props ?? {};

    return createBulkVehicle(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateBulkVehicleMutationResult = NonNullable<
  Awaited<ReturnType<typeof createBulkVehicle>>
>;
export type CreateBulkVehicleMutationBody = VehicleCreateBulkInput;
export type CreateBulkVehicleMutationError = ErrorType<StandardError>;

/**
 * @summary Create multiple vehicles
 */
export const useCreateBulkVehicle = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBulkVehicle>>,
    TError,
    { data: VehicleCreateBulkInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createBulkVehicle>>,
  TError,
  { data: VehicleCreateBulkInput },
  TContext
> => {
  const mutationOptions = getCreateBulkVehicleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update multiple vehicles
 */
export const updateBulkVehicle = (
  vehicleUpdateBulkInput: MaybeRef<VehicleUpdateBulkInput>,
) => {
  vehicleUpdateBulkInput = unref(vehicleUpdateBulkInput);

  return axiosClient<void>({
    url: `/vehicles/bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: vehicleUpdateBulkInput,
  });
};

export const getUpdateBulkVehicleMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateBulkVehicle>>,
    TError,
    { data: VehicleUpdateBulkInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateBulkVehicle>>,
  TError,
  { data: VehicleUpdateBulkInput },
  TContext
> => {
  const mutationKey = ["updateBulkVehicle"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateBulkVehicle>>,
    { data: VehicleUpdateBulkInput }
  > = (props) => {
    const { data } = props ?? {};

    return updateBulkVehicle(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateBulkVehicleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateBulkVehicle>>
>;
export type UpdateBulkVehicleMutationBody = VehicleUpdateBulkInput;
export type UpdateBulkVehicleMutationError = ErrorType<StandardError>;

/**
 * @summary Update multiple vehicles
 */
export const useUpdateBulkVehicle = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateBulkVehicle>>,
    TError,
    { data: VehicleUpdateBulkInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateBulkVehicle>>,
  TError,
  { data: VehicleUpdateBulkInput },
  TContext
> => {
  const mutationOptions = getUpdateBulkVehicleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Create new Vehicle
 */
export const createVehicle = (
  vehicleCreateInput: MaybeRef<VehicleCreateInput>,
  signal?: AbortSignal,
) => {
  vehicleCreateInput = unref(vehicleCreateInput);

  return axiosClient<Vehicle>({
    url: `/vehicles`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: vehicleCreateInput,
    signal,
  });
};

export const getCreateVehicleMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createVehicle>>,
    TError,
    { data: VehicleCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createVehicle>>,
  TError,
  { data: VehicleCreateInput },
  TContext
> => {
  const mutationKey = ["createVehicle"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createVehicle>>,
    { data: VehicleCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return createVehicle(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateVehicleMutationResult = NonNullable<
  Awaited<ReturnType<typeof createVehicle>>
>;
export type CreateVehicleMutationBody = VehicleCreateInput;
export type CreateVehicleMutationError = ErrorType<StandardError>;

/**
 * @summary Create new Vehicle
 */
export const useCreateVehicle = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createVehicle>>,
    TError,
    { data: VehicleCreateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createVehicle>>,
  TError,
  { data: VehicleCreateInput },
  TContext
> => {
  const mutationOptions = getCreateVehicleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete all ingame bought Vehicles
 */
export const destroyAllIngameVehicles = () => {
  return axiosClient<void>({
    url: `/vehicles/destroy-all-ingame`,
    method: "DELETE",
  });
};

export const getDestroyAllIngameVehiclesMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyAllIngameVehicles>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyAllIngameVehicles>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["destroyAllIngameVehicles"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyAllIngameVehicles>>,
    void
  > = () => {
    return destroyAllIngameVehicles();
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyAllIngameVehiclesMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyAllIngameVehicles>>
>;

export type DestroyAllIngameVehiclesMutationError = ErrorType<StandardError>;

/**
 * @summary Delete all ingame bought Vehicles
 */
export const useDestroyAllIngameVehicles = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyAllIngameVehicles>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyAllIngameVehicles>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDestroyAllIngameVehiclesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Destroy multiple Vehicles
 */
export const destroyBulkVehicle = (
  vehicleDestroyBulkInput: MaybeRef<VehicleDestroyBulkInput>,
) => {
  vehicleDestroyBulkInput = unref(vehicleDestroyBulkInput);

  return axiosClient<void>({
    url: `/vehicles/destroy-bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: vehicleDestroyBulkInput,
  });
};

export const getDestroyBulkVehicleMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyBulkVehicle>>,
    TError,
    { data: VehicleDestroyBulkInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyBulkVehicle>>,
  TError,
  { data: VehicleDestroyBulkInput },
  TContext
> => {
  const mutationKey = ["destroyBulkVehicle"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyBulkVehicle>>,
    { data: VehicleDestroyBulkInput }
  > = (props) => {
    const { data } = props ?? {};

    return destroyBulkVehicle(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyBulkVehicleMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyBulkVehicle>>
>;
export type DestroyBulkVehicleMutationBody = VehicleDestroyBulkInput;
export type DestroyBulkVehicleMutationError = ErrorType<StandardError>;

/**
 * @summary Destroy multiple Vehicles
 */
export const useDestroyBulkVehicle = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyBulkVehicle>>,
    TError,
    { data: VehicleDestroyBulkInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyBulkVehicle>>,
  TError,
  { data: VehicleDestroyBulkInput },
  TContext
> => {
  const mutationOptions = getDestroyBulkVehicleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Vehicle
 */
export const destroyVehicle = (id: MaybeRef<string>) => {
  id = unref(id);

  return axiosClient<Vehicle>({ url: `/vehicles/${id}`, method: "DELETE" });
};

export const getDestroyVehicleMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyVehicle>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyVehicle>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["destroyVehicle"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyVehicle>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return destroyVehicle(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyVehicleMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyVehicle>>
>;

export type DestroyVehicleMutationError = ErrorType<StandardError>;

/**
 * @summary Delete Vehicle
 */
export const useDestroyVehicle = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyVehicle>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyVehicle>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDestroyVehicleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update Vehicle
 */
export const updateVehicle = (
  id: MaybeRef<string>,
  vehicleUpdateInput: MaybeRef<VehicleUpdateInput>,
) => {
  id = unref(id);
  vehicleUpdateInput = unref(vehicleUpdateInput);

  return axiosClient<Vehicle>({
    url: `/vehicles/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: vehicleUpdateInput,
  });
};

export const getUpdateVehicleMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateVehicle>>,
    TError,
    { id: string; data: VehicleUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateVehicle>>,
  TError,
  { id: string; data: VehicleUpdateInput },
  TContext
> => {
  const mutationKey = ["updateVehicle"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateVehicle>>,
    { id: string; data: VehicleUpdateInput }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateVehicle(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateVehicleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateVehicle>>
>;
export type UpdateVehicleMutationBody = VehicleUpdateInput;
export type UpdateVehicleMutationError = ErrorType<StandardError>;

/**
 * @summary Update Vehicle
 */
export const useUpdateVehicle = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateVehicle>>,
    TError,
    { id: string; data: VehicleUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateVehicle>>,
  TError,
  { id: string; data: VehicleUpdateInput },
  TContext
> => {
  const mutationOptions = getUpdateVehicleMutationOptions(options);

  return useMutation(mutationOptions);
};
