/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  Check,
  CheckInput,
  Fleet,
  FleetCreateInput,
  FleetMember,
  FleetModelCountsStats,
  FleetPublicVehicles,
  FleetUpdateInput,
  FleetVehicleExport,
  FleetVehicles,
  FleetVehiclesExportParams,
  FleetVehiclesParams,
  PublicFleetStatsModelCountsParams,
  PublicFleetVehiclesEmbedParams,
  PublicFleetVehiclesParams,
  StandardError,
  ValidationError,
  VehiclePublic,
} from "../models";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary Check Fleet FID Availability
 */
export const checkFID = (
  checkInput: MaybeRef<CheckInput>,
  signal?: AbortSignal,
) => {
  checkInput = unref(checkInput);

  return axiosClient<Check>({
    url: `/fleets/check`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: checkInput,
    signal,
  });
};

export const getCheckFIDMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkFID>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof checkFID>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationKey = ["checkFID"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checkFID>>,
    { data: CheckInput }
  > = (props) => {
    const { data } = props ?? {};

    return checkFID(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CheckFIDMutationResult = NonNullable<
  Awaited<ReturnType<typeof checkFID>>
>;
export type CheckFIDMutationBody = CheckInput;
export type CheckFIDMutationError = ErrorType<StandardError>;

/**
 * @summary Check Fleet FID Availability
 */
export const useCheckFID = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkFID>>,
    TError,
    { data: CheckInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof checkFID>>,
  TError,
  { data: CheckInput },
  TContext
> => {
  const mutationOptions = getCheckFIDMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Create Fleet
 */
export const createFleet = (
  fleetCreateInput: MaybeRef<FleetCreateInput>,
  signal?: AbortSignal,
) => {
  fleetCreateInput = unref(fleetCreateInput);

  return axiosClient<Fleet>({
    url: `/fleets`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: fleetCreateInput,
    signal,
  });
};

export const getCreateFleetMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFleet>>,
    TError,
    { data: FleetCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createFleet>>,
  TError,
  { data: FleetCreateInput },
  TContext
> => {
  const mutationKey = ["createFleet"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createFleet>>,
    { data: FleetCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return createFleet(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateFleetMutationResult = NonNullable<
  Awaited<ReturnType<typeof createFleet>>
>;
export type CreateFleetMutationBody = FleetCreateInput;
export type CreateFleetMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Create Fleet
 */
export const useCreateFleet = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFleet>>,
    TError,
    { data: FleetCreateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createFleet>>,
  TError,
  { data: FleetCreateInput },
  TContext
> => {
  const mutationOptions = getCreateFleetMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * You are not the owner of this Fleet
 * @summary Destroy Fleet
 */
export const destroyFleet = (slug: MaybeRef<string>) => {
  slug = unref(slug);

  return axiosClient<void>({ url: `/fleets/${slug}`, method: "DELETE" });
};

export const getDestroyFleetMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyFleet>>,
    TError,
    { slug: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyFleet>>,
  TError,
  { slug: string },
  TContext
> => {
  const mutationKey = ["destroyFleet"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyFleet>>,
    { slug: string }
  > = (props) => {
    const { slug } = props ?? {};

    return destroyFleet(slug);
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyFleetMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyFleet>>
>;

export type DestroyFleetMutationError = ErrorType<StandardError>;

/**
 * @summary Destroy Fleet
 */
export const useDestroyFleet = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyFleet>>,
    TError,
    { slug: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyFleet>>,
  TError,
  { slug: string },
  TContext
> => {
  const mutationOptions = getDestroyFleetMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Fleet Detail
 */
export const fleet = (slug: MaybeRef<string>, signal?: AbortSignal) => {
  slug = unref(slug);

  return axiosClient<Fleet>({ url: `/fleets/${slug}`, method: "GET", signal });
};

const getFleetQueryKey = (slug: MaybeRef<string>) => {
  return ["fleets", slug] as const;
};

export const useFleetQueryOptions = <
  TData = Awaited<ReturnType<typeof fleet>>,
  TError = ErrorType<StandardError>,
>(
  slug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fleet>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getFleetQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fleet>>> = ({
    signal,
  }) => fleet(slug, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof fleet>>,
    TError,
    TData
  >;
};

export type FleetQueryResult = NonNullable<Awaited<ReturnType<typeof fleet>>>;
export type FleetQueryError = ErrorType<StandardError>;

/**
 * @summary Fleet Detail
 */

export function useFleet<
  TData = Awaited<ReturnType<typeof fleet>>,
  TError = ErrorType<StandardError>,
>(
  slug: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fleet>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useFleetQueryOptions(slug, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * You are not an Admin or Officer of this Fleet
 * @summary Update Fleet
 */
export const updateFleet = (
  slug: MaybeRef<string>,
  fleetUpdateInput: MaybeRef<FleetUpdateInput>,
) => {
  slug = unref(slug);
  fleetUpdateInput = unref(fleetUpdateInput);
  const formData = new FormData();
  if (fleetUpdateInput.fid !== undefined) {
    formData.append("fid", fleetUpdateInput.fid);
  }
  if (fleetUpdateInput.name !== undefined) {
    formData.append("name", fleetUpdateInput.name);
  }
  if (fleetUpdateInput.logo !== undefined) {
    formData.append("logo", fleetUpdateInput.logo);
  }
  if (fleetUpdateInput.removeLogo !== undefined) {
    formData.append("removeLogo", fleetUpdateInput.removeLogo.toString());
  }
  if (fleetUpdateInput.backgroundImage !== undefined) {
    formData.append("backgroundImage", fleetUpdateInput.backgroundImage);
  }
  if (fleetUpdateInput.removeBackground !== undefined) {
    formData.append(
      "removeBackground",
      fleetUpdateInput.removeBackground.toString(),
    );
  }
  if (fleetUpdateInput.description !== undefined) {
    formData.append("description", fleetUpdateInput.description);
  }
  if (fleetUpdateInput.publicFleet !== undefined) {
    formData.append("publicFleet", fleetUpdateInput.publicFleet.toString());
  }
  if (fleetUpdateInput.publicFleetStats !== undefined) {
    formData.append(
      "publicFleetStats",
      fleetUpdateInput.publicFleetStats.toString(),
    );
  }
  if (fleetUpdateInput.homepage !== undefined) {
    formData.append("homepage", fleetUpdateInput.homepage);
  }
  if (fleetUpdateInput.rsiSid !== undefined) {
    formData.append("rsiSid", fleetUpdateInput.rsiSid);
  }
  if (fleetUpdateInput.discord !== undefined) {
    formData.append("discord", fleetUpdateInput.discord);
  }
  if (fleetUpdateInput.ts !== undefined) {
    formData.append("ts", fleetUpdateInput.ts);
  }
  if (fleetUpdateInput.youtube !== undefined) {
    formData.append("youtube", fleetUpdateInput.youtube);
  }
  if (fleetUpdateInput.twitch !== undefined) {
    formData.append("twitch", fleetUpdateInput.twitch);
  }
  if (fleetUpdateInput.guilded !== undefined) {
    formData.append("guilded", fleetUpdateInput.guilded);
  }

  return axiosClient<Fleet>({
    url: `/fleets/${slug}`,
    method: "PUT",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getUpdateFleetMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateFleet>>,
    TError,
    { slug: string; data: FleetUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateFleet>>,
  TError,
  { slug: string; data: FleetUpdateInput },
  TContext
> => {
  const mutationKey = ["updateFleet"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateFleet>>,
    { slug: string; data: FleetUpdateInput }
  > = (props) => {
    const { slug, data } = props ?? {};

    return updateFleet(slug, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateFleetMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateFleet>>
>;
export type UpdateFleetMutationBody = FleetUpdateInput;
export type UpdateFleetMutationError = ErrorType<StandardError>;

/**
 * @summary Update Fleet
 */
export const useUpdateFleet = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateFleet>>,
    TError,
    { slug: string; data: FleetUpdateInput },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateFleet>>,
  TError,
  { slug: string; data: FleetUpdateInput },
  TContext
> => {
  const mutationOptions = getUpdateFleetMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Find Fleet by Invite
 */
export const findFleetByInvite = (
  token: MaybeRef<string>,
  signal?: AbortSignal,
) => {
  token = unref(token);

  return axiosClient<Fleet>({
    url: `/fleets/find-by-invite/${token}`,
    method: "POST",
    signal,
  });
};

export const getFindFleetByInviteMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof findFleetByInvite>>,
    TError,
    { token: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof findFleetByInvite>>,
  TError,
  { token: string },
  TContext
> => {
  const mutationKey = ["findFleetByInvite"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof findFleetByInvite>>,
    { token: string }
  > = (props) => {
    const { token } = props ?? {};

    return findFleetByInvite(token);
  };

  return { mutationFn, ...mutationOptions };
};

export type FindFleetByInviteMutationResult = NonNullable<
  Awaited<ReturnType<typeof findFleetByInvite>>
>;

export type FindFleetByInviteMutationError = ErrorType<StandardError>;

/**
 * @summary Find Fleet by Invite
 */
export const useFindFleetByInvite = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof findFleetByInvite>>,
    TError,
    { token: string },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof findFleetByInvite>>,
  TError,
  { token: string },
  TContext
> => {
  const mutationOptions = getFindFleetByInviteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Fleet Invites current User
 */
export const fleetInvites = (signal?: AbortSignal) => {
  return axiosClient<FleetMember[]>({
    url: `/fleets/invites`,
    method: "GET",
    signal,
  });
};

const getFleetInvitesQueryKey = () => {
  return ["fleets", "invites"] as const;
};

export const useFleetInvitesQueryOptions = <
  TData = Awaited<ReturnType<typeof fleetInvites>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof fleetInvites>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getFleetInvitesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fleetInvites>>> = ({
    signal,
  }) => fleetInvites(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof fleetInvites>>,
    TError,
    TData
  >;
};

export type FleetInvitesQueryResult = NonNullable<
  Awaited<ReturnType<typeof fleetInvites>>
>;
export type FleetInvitesQueryError = ErrorType<StandardError>;

/**
 * @summary Fleet Invites current User
 */

export function useFleetInvites<
  TData = Awaited<ReturnType<typeof fleetInvites>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof fleetInvites>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useFleetInvitesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Fleets for current User
 */
export const myFleets = (signal?: AbortSignal) => {
  return axiosClient<Fleet[]>({ url: `/fleets/my`, method: "GET", signal });
};

const getMyFleetsQueryKey = () => {
  return ["fleets", "my"] as const;
};

export const useMyFleetsQueryOptions = <
  TData = Awaited<ReturnType<typeof myFleets>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof myFleets>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getMyFleetsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof myFleets>>> = ({
    signal,
  }) => myFleets(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof myFleets>>,
    TError,
    TData
  >;
};

export type MyFleetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof myFleets>>
>;
export type MyFleetsQueryError = ErrorType<StandardError>;

/**
 * @summary Fleets for current User
 */

export function useMyFleets<
  TData = Awaited<ReturnType<typeof myFleets>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof myFleets>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useMyFleetsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Fleet Vehicles List
 */
export const fleetVehiclesExport = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetVehiclesExportParams>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  params = unref(params);

  return axiosClient<FleetVehicleExport[]>({
    url: `/fleets/${fleetSlug}/vehicles/export`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

const getFleetVehiclesExportQueryKey = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetVehiclesExportParams>,
) => {
  return [
    "fleets",
    fleetSlug,
    "vehicles",
    "export",
    ...(params ? [params] : []),
  ] as const;
};

export const useFleetVehiclesExportQueryOptions = <
  TData = Awaited<ReturnType<typeof fleetVehiclesExport>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetVehiclesExportParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fleetVehiclesExport>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getFleetVehiclesExportQueryKey(fleetSlug, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fleetVehiclesExport>>
  > = ({ signal }) => fleetVehiclesExport(fleetSlug, params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof fleetVehiclesExport>>,
    TError,
    TData
  >;
};

export type FleetVehiclesExportQueryResult = NonNullable<
  Awaited<ReturnType<typeof fleetVehiclesExport>>
>;
export type FleetVehiclesExportQueryError = ErrorType<StandardError>;

/**
 * @summary Fleet Vehicles List
 */

export function useFleetVehiclesExport<
  TData = Awaited<ReturnType<typeof fleetVehiclesExport>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetVehiclesExportParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof fleetVehiclesExport>>,
        TError,
        TData
      >
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useFleetVehiclesExportQueryOptions(
    fleetSlug,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Fleet Vehicles List
 */
export const fleetVehicles = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetVehiclesParams>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  params = unref(params);

  return axiosClient<FleetVehicles>({
    url: `/fleets/${fleetSlug}/vehicles`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

const getFleetVehiclesQueryKey = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetVehiclesParams>,
) => {
  return [
    "fleets",
    fleetSlug,
    "vehicles",
    ...(params ? [params] : []),
  ] as const;
};

export const useFleetVehiclesQueryOptions = <
  TData = Awaited<ReturnType<typeof fleetVehicles>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetVehiclesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fleetVehicles>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getFleetVehiclesQueryKey(fleetSlug, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fleetVehicles>>> = ({
    signal,
  }) => fleetVehicles(fleetSlug, params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof fleetVehicles>>,
    TError,
    TData
  >;
};

export type FleetVehiclesQueryResult = NonNullable<
  Awaited<ReturnType<typeof fleetVehicles>>
>;
export type FleetVehiclesQueryError = ErrorType<StandardError>;

/**
 * @summary Fleet Vehicles List
 */

export function useFleetVehicles<
  TData = Awaited<ReturnType<typeof fleetVehicles>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<FleetVehiclesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof fleetVehicles>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useFleetVehiclesQueryOptions(fleetSlug, params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Public Fleet Stats Model Counts
 */
export const publicFleetStatsModelCounts = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetStatsModelCountsParams>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  params = unref(params);

  return axiosClient<FleetModelCountsStats>({
    url: `/public/fleets/${fleetSlug}/stats/model-counts`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

const getPublicFleetStatsModelCountsQueryKey = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetStatsModelCountsParams>,
) => {
  return [
    "public",
    "fleets",
    fleetSlug,
    "stats",
    "model-counts",
    ...(params ? [params] : []),
  ] as const;
};

export const usePublicFleetStatsModelCountsQueryOptions = <
  TData = Awaited<ReturnType<typeof publicFleetStatsModelCounts>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetStatsModelCountsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicFleetStatsModelCounts>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getPublicFleetStatsModelCountsQueryKey(fleetSlug, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof publicFleetStatsModelCounts>>
  > = ({ signal }) => publicFleetStatsModelCounts(fleetSlug, params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof publicFleetStatsModelCounts>>,
    TError,
    TData
  >;
};

export type PublicFleetStatsModelCountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof publicFleetStatsModelCounts>>
>;
export type PublicFleetStatsModelCountsQueryError = ErrorType<StandardError>;

/**
 * @summary Public Fleet Stats Model Counts
 */

export function usePublicFleetStatsModelCounts<
  TData = Awaited<ReturnType<typeof publicFleetStatsModelCounts>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetStatsModelCountsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicFleetStatsModelCounts>>,
        TError,
        TData
      >
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = usePublicFleetStatsModelCountsQueryOptions(
    fleetSlug,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Public Fleet Vehicles Embed for the Fleetyards Widget
 */
export const publicFleetVehiclesEmbed = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetVehiclesEmbedParams>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  params = unref(params);

  return axiosClient<VehiclePublic[]>({
    url: `/public/fleets/${fleetSlug}/vehicles/embed`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

const getPublicFleetVehiclesEmbedQueryKey = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetVehiclesEmbedParams>,
) => {
  return [
    "public",
    "fleets",
    fleetSlug,
    "vehicles",
    "embed",
    ...(params ? [params] : []),
  ] as const;
};

export const usePublicFleetVehiclesEmbedQueryOptions = <
  TData = Awaited<ReturnType<typeof publicFleetVehiclesEmbed>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetVehiclesEmbedParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicFleetVehiclesEmbed>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getPublicFleetVehiclesEmbedQueryKey(fleetSlug, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof publicFleetVehiclesEmbed>>
  > = ({ signal }) => publicFleetVehiclesEmbed(fleetSlug, params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof publicFleetVehiclesEmbed>>,
    TError,
    TData
  >;
};

export type PublicFleetVehiclesEmbedQueryResult = NonNullable<
  Awaited<ReturnType<typeof publicFleetVehiclesEmbed>>
>;
export type PublicFleetVehiclesEmbedQueryError = ErrorType<StandardError>;

/**
 * @summary Public Fleet Vehicles Embed for the Fleetyards Widget
 */

export function usePublicFleetVehiclesEmbed<
  TData = Awaited<ReturnType<typeof publicFleetVehiclesEmbed>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetVehiclesEmbedParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicFleetVehiclesEmbed>>,
        TError,
        TData
      >
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = usePublicFleetVehiclesEmbedQueryOptions(
    fleetSlug,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Public Fleet Vehicles List
 */
export const publicFleetVehicles = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetVehiclesParams>,
  signal?: AbortSignal,
) => {
  fleetSlug = unref(fleetSlug);
  params = unref(params);

  return axiosClient<FleetPublicVehicles>({
    url: `/public/fleets/${fleetSlug}/vehicles`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

const getPublicFleetVehiclesQueryKey = (
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetVehiclesParams>,
) => {
  return [
    "public",
    "fleets",
    fleetSlug,
    "vehicles",
    ...(params ? [params] : []),
  ] as const;
};

export const usePublicFleetVehiclesQueryOptions = <
  TData = Awaited<ReturnType<typeof publicFleetVehicles>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetVehiclesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicFleetVehicles>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getPublicFleetVehiclesQueryKey(fleetSlug, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof publicFleetVehicles>>
  > = ({ signal }) => publicFleetVehicles(fleetSlug, params, signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof publicFleetVehicles>>,
    TError,
    TData
  >;
};

export type PublicFleetVehiclesQueryResult = NonNullable<
  Awaited<ReturnType<typeof publicFleetVehicles>>
>;
export type PublicFleetVehiclesQueryError = ErrorType<StandardError>;

/**
 * @summary Public Fleet Vehicles List
 */

export function usePublicFleetVehicles<
  TData = Awaited<ReturnType<typeof publicFleetVehicles>>,
  TError = ErrorType<StandardError>,
>(
  fleetSlug: MaybeRef<string>,
  params?: MaybeRef<PublicFleetVehiclesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof publicFleetVehicles>>,
        TError,
        TData
      >
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = usePublicFleetVehiclesQueryOptions(
    fleetSlug,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
