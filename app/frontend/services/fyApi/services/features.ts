/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";

import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";
import { customQueryOptions } from "../../customQueryOptions";

/**
 * @summary Feature Flags for User
 */
export const features = (signal?: AbortSignal) => {
  return axiosClient<string[]>({ url: `/features`, method: "GET", signal });
};

export const getFeaturesQueryKey = () => {
  return ["features"] as const;
};

export const useFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof features>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof features>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getFeaturesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof features>>> = ({
    signal,
  }) => features(signal);

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof features>>,
    TError,
    TData
  >;
};

export type FeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof features>>
>;
export type FeaturesQueryError = ErrorType<unknown>;

/**
 * @summary Feature Flags for User
 */

export function useFeatures<
  TData = Awaited<ReturnType<typeof features>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof features>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useFeaturesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}
