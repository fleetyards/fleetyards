/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import { unref } from "vue";
import type { MaybeRef } from "vue";
import type {
  Hangar,
  HangarExportParams,
  HangarImportBody,
  HangarImportResult,
  HangarParams,
  HangarSyncResult,
  StandardError,
  SyncRsiHangarBody,
  ValidationError,
  VehicleExport,
} from "../models";
import { axiosClient } from "../axiosClient";
import type { ErrorType } from "../axiosClient";

/**
 * @summary Clear your personal Hangar
 */
export const destroyHangar = () => {
  return axiosClient<void>({ url: `/hangar`, method: "DELETE" });
};

export const getDestroyHangarMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyHangar>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof destroyHangar>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["destroyHangar"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof destroyHangar>>,
    void
  > = () => {
    return destroyHangar();
  };

  return { mutationFn, ...mutationOptions };
};

export type DestroyHangarMutationResult = NonNullable<
  Awaited<ReturnType<typeof destroyHangar>>
>;

export type DestroyHangarMutationError = ErrorType<StandardError>;

/**
 * @summary Clear your personal Hangar
 */
export const useDestroyHangar = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof destroyHangar>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof destroyHangar>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDestroyHangarMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Your personal Hangar
 */
export const hangar = (
  params?: MaybeRef<HangarParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<Hangar>({
    url: `/hangar`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getHangarQueryKey = (params?: MaybeRef<HangarParams>) => {
  return ["hangar", ...(params ? [params] : [])] as const;
};

export const getHangarQueryOptions = <
  TData = Awaited<ReturnType<typeof hangar>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<HangarParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof hangar>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof hangar>>> = ({
    signal,
  }) => hangar(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangar>>,
    TError,
    TData
  >;
};

export type HangarQueryResult = NonNullable<Awaited<ReturnType<typeof hangar>>>;
export type HangarQueryError = ErrorType<StandardError>;

/**
 * @summary Your personal Hangar
 */

export function useHangar<
  TData = Awaited<ReturnType<typeof hangar>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<HangarParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof hangar>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Export your personal Hangar
 */
export const hangarExport = (
  params?: MaybeRef<HangarExportParams>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return axiosClient<VehicleExport[]>({
    url: `/hangar/export`,
    method: "GET",
    params: unref(params),
    signal,
  });
};

export const getHangarExportQueryKey = (
  params?: MaybeRef<HangarExportParams>,
) => {
  return ["hangar", "export", ...(params ? [params] : [])] as const;
};

export const getHangarExportQueryOptions = <
  TData = Awaited<ReturnType<typeof hangarExport>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<HangarExportParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof hangarExport>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarExportQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof hangarExport>>> = ({
    signal,
  }) => hangarExport(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangarExport>>,
    TError,
    TData
  >;
};

export type HangarExportQueryResult = NonNullable<
  Awaited<ReturnType<typeof hangarExport>>
>;
export type HangarExportQueryError = ErrorType<StandardError>;

/**
 * @summary Export your personal Hangar
 */

export function useHangarExport<
  TData = Awaited<ReturnType<typeof hangarExport>>,
  TError = ErrorType<StandardError>,
>(
  params?: MaybeRef<HangarExportParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof hangarExport>>, TError, TData>
    >;
  },
): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarExportQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Import to your personal Hangar
 */
export const hangarImport = (hangarImportBody: MaybeRef<HangarImportBody>) => {
  hangarImportBody = unref(hangarImportBody);
  const formData = new FormData();
  if (hangarImportBody.import !== undefined) {
    formData.append("import", hangarImportBody.import);
  }

  return axiosClient<HangarImportResult>({
    url: `/hangar/import`,
    method: "PUT",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getHangarImportMutationOptions = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof hangarImport>>,
    TError,
    { data: HangarImportBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof hangarImport>>,
  TError,
  { data: HangarImportBody },
  TContext
> => {
  const mutationKey = ["hangarImport"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof hangarImport>>,
    { data: HangarImportBody }
  > = (props) => {
    const { data } = props ?? {};

    return hangarImport(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type HangarImportMutationResult = NonNullable<
  Awaited<ReturnType<typeof hangarImport>>
>;
export type HangarImportMutationBody = HangarImportBody;
export type HangarImportMutationError = ErrorType<
  ValidationError | StandardError
>;

/**
 * @summary Import to your personal Hangar
 */
export const useHangarImport = <
  TError = ErrorType<ValidationError | StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof hangarImport>>,
    TError,
    { data: HangarImportBody },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof hangarImport>>,
  TError,
  { data: HangarImportBody },
  TContext
> => {
  const mutationOptions = getHangarImportMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Your personal Hangar items
 */
export const hangarItems = (signal?: AbortSignal) => {
  return axiosClient<string[]>({ url: `/hangar/items`, method: "GET", signal });
};

export const getHangarItemsQueryKey = () => {
  return ["hangar", "items"] as const;
};

export const getHangarItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof hangarItems>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof hangarItems>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getHangarItemsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof hangarItems>>> = ({
    signal,
  }) => hangarItems(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof hangarItems>>,
    TError,
    TData
  >;
};

export type HangarItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof hangarItems>>
>;
export type HangarItemsQueryError = ErrorType<StandardError>;

/**
 * @summary Your personal Hangar items
 */

export function useHangarItems<
  TData = Awaited<ReturnType<typeof hangarItems>>,
  TError = ErrorType<StandardError>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof hangarItems>>, TError, TData>
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getHangarItemsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}

/**
 * @summary Move all Ingame Ships from your Hangar to your Wishlist
 */
export const moveAllIngameToWishlist = () => {
  return axiosClient<void>({
    url: `/hangar/move-all-ingame-to-wishlist`,
    method: "PUT",
  });
};

export const getMoveAllIngameToWishlistMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof moveAllIngameToWishlist>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof moveAllIngameToWishlist>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["moveAllIngameToWishlist"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof moveAllIngameToWishlist>>,
    void
  > = () => {
    return moveAllIngameToWishlist();
  };

  return { mutationFn, ...mutationOptions };
};

export type MoveAllIngameToWishlistMutationResult = NonNullable<
  Awaited<ReturnType<typeof moveAllIngameToWishlist>>
>;

export type MoveAllIngameToWishlistMutationError = ErrorType<StandardError>;

/**
 * @summary Move all Ingame Ships from your Hangar to your Wishlist
 */
export const useMoveAllIngameToWishlist = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof moveAllIngameToWishlist>>,
    TError,
    void,
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof moveAllIngameToWishlist>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getMoveAllIngameToWishlistMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Sync RSI Hangar
 */
export const syncRsiHangar = (
  syncRsiHangarBody: MaybeRef<SyncRsiHangarBody>,
) => {
  syncRsiHangarBody = unref(syncRsiHangarBody);

  return axiosClient<HangarSyncResult>({
    url: `/hangar/sync-rsi-hangar`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: syncRsiHangarBody,
  });
};

export const getSyncRsiHangarMutationOptions = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof syncRsiHangar>>,
    TError,
    { data: SyncRsiHangarBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof syncRsiHangar>>,
  TError,
  { data: SyncRsiHangarBody },
  TContext
> => {
  const mutationKey = ["syncRsiHangar"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof syncRsiHangar>>,
    { data: SyncRsiHangarBody }
  > = (props) => {
    const { data } = props ?? {};

    return syncRsiHangar(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SyncRsiHangarMutationResult = NonNullable<
  Awaited<ReturnType<typeof syncRsiHangar>>
>;
export type SyncRsiHangarMutationBody = SyncRsiHangarBody;
export type SyncRsiHangarMutationError = ErrorType<StandardError>;

/**
 * @summary Sync RSI Hangar
 */
export const useSyncRsiHangar = <
  TError = ErrorType<StandardError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof syncRsiHangar>>,
    TError,
    { data: SyncRsiHangarBody },
    TContext
  >;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof syncRsiHangar>>,
  TError,
  { data: SyncRsiHangarBody },
  TContext
> => {
  const mutationOptions = getSyncRsiHangarMutationOptions(options);

  return useMutation(mutationOptions);
};
