/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * FleetYards.net API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  ScDataVersion,
  Version
} from '../models';

import { axiosClient } from '../../axiosClient';
import type { ErrorType } from '../../axiosClient';
import { customQueryOptions } from '../../customQueryOptions';





/**
 * @summary SC Data Version
 */
export const scDataVersion = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClient<ScDataVersion>(
      {url: `/sc-data/version`, method: 'GET', signal
    },
      );
    }
  

const getScDataVersionQueryKey = () => {
    return ['sc-data','version'] as const;
    }

    
export const useScDataVersionQueryOptions = <TData = Awaited<ReturnType<typeof scDataVersion>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof scDataVersion>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getScDataVersionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof scDataVersion>>> = ({ signal }) => scDataVersion(signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof scDataVersion>>, TError, TData> 
}

export type ScDataVersionQueryResult = NonNullable<Awaited<ReturnType<typeof scDataVersion>>>
export type ScDataVersionQueryError = ErrorType<unknown>


/**
 * @summary SC Data Version
 */

export function useScDataVersion<TData = Awaited<ReturnType<typeof scDataVersion>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof scDataVersion>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useScDataVersionQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Version of Fleetyards
 */
export const version = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosClient<Version>(
      {url: `/version`, method: 'GET', signal
    },
      );
    }
  

const getVersionQueryKey = () => {
    return ['version'] as const;
    }

    
export const useVersionQueryOptions = <TData = Awaited<ReturnType<typeof version>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof version>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getVersionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof version>>> = ({ signal }) => version(signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof version>>, TError, TData> 
}

export type VersionQueryResult = NonNullable<Awaited<ReturnType<typeof version>>>
export type VersionQueryError = ErrorType<unknown>


/**
 * @summary Version of Fleetyards
 */

export function useVersion<TData = Awaited<ReturnType<typeof version>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof version>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = useVersionQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}





export const getScDataVersionResponseMock = (overrideResponse: Partial< ScDataVersion > = {}): ScDataVersion => ({version: faker.string.alpha(20), ...overrideResponse})

export const getVersionResponseMock = (overrideResponse: Partial< Version > = {}): Version => ({version: faker.string.alpha(20), codename: faker.string.alpha(20), ...overrideResponse})


export const getScDataVersionMockHandler = (overrideResponse?: ScDataVersion | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ScDataVersion> | ScDataVersion)) => {
  return http.get('*/sc-data/version', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getScDataVersionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getVersionMockHandler = (overrideResponse?: Version | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Version> | Version)) => {
  return http.get('*/version', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVersionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getVersionsMock = () => [
  getScDataVersionMockHandler(),
  getVersionMockHandler()
]
